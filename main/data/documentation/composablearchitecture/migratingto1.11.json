{"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"]}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"reference","isActive":true},{"text":" for more information.","type":"text"}]}],"name":"Important","style":"important","type":"aside"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Mutating-shared-state-concurrently"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Supplying-mock-read-only-state-to-previews"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Migrating-to-1112"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","anchor":"Mutating-shared-state-concurrently","text":"Mutating shared state concurrently"},{"inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"overridingTitle":"sharing state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitleInlineContent":[{"text":"sharing state","type":"text"}],"type":"reference","isActive":true},{"text":" amongst your features. And you can mutate a piece of shared","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"type":"text","text":" "},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"text":" ","type":"text"},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}],"type":"paragraph"},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now, "},{"type":"codeVoice","code":"Shared"},{"text":" is ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"text":"to it from two different threads. However, allowing direct mutation does make the value susceptible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to race conditions. If you were to perform "},{"type":"codeVoice","code":"count += 1"},{"text":" from 1,000 threads, it is possible for","type":"text"},{"text":" ","type":"text"},{"text":"the final value to not be 1,000.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We wanted the ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type to be as ergonomic as possible, and that is why we make it directly"},{"type":"text","text":" "},{"type":"text","text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so"},{"type":"text","text":" "},{"type":"text","text":"now the "},{"type":"codeVoice","code":"wrappedValue"},{"text":" setter has been marked unavailable from asynchronous contexts, with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a helpful message of how to fix:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method on the projected value of "},{"code":"@Shared","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"text":"back in the reference.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems","type":"text"},{"type":"text","text":" "},{"text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the","type":"text"},{"text":" ","type":"text"},{"text":"shared state as possible in a single ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":". That will make sure that the full unit of work is","type":"text"},{"type":"text","text":" "},{"text":"guarded by a lock.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Supplying mock read-only state to previews","anchor":"Supplying-mock-read-only-state-to-previews"},{"inlineContent":[{"text":"A new ","type":"text"},{"code":"constant","type":"codeVoice"},{"type":"text","text":" helper on "},{"code":"SharedReader","type":"codeVoice"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"type":"text","text":" "},{"text":"Xcode previews. It works like SwiftUI’s ","type":"text"},{"code":"Binding.constant","type":"codeVoice"},{"type":"text","text":", but for shared references:"}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"type":"codeListing"},{"text":"Migrating to 1.11.2","anchor":"Migrating-to-1112","type":"heading","level":2},{"inlineContent":[{"text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:","type":"text"}],"type":"paragraph"},{"type":"heading","text":"`withLock` is now `@MainActor`","level":3,"anchor":"withLock-is-now-MainActor"},{"inlineContent":[{"text":"In ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true,"overridingTitle":"version 1.11","overridingTitleInlineContent":[{"type":"text","text":"version 1.11"}],"type":"reference"},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"text":" ","type":"text"},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true,"overridingTitle":"migration guide"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":", and so"},{"type":"text","text":" "},{"type":"text","text":"you will now need to "},{"type":"codeVoice","code":"await"},{"text":" its usage:","type":"text"}]},{"syntax":"diff","type":"codeListing","code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler should suggest this fix-it for you."}]},{"level":3,"anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","type":"heading"},{"inlineContent":[{"type":"text","text":"When the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper was first introduced, its dynamic member lookup was overloaded"},{"type":"text","text":" "},{"text":"to automatically unwrap optionals for ergonomic purposes:","type":"text"}],"type":"paragraph"},{"code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unfortunately made dynamic member lookup a little more difficult to understand:"}]},{"code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"…and required casting and other tricks to transform shared values into what one might expect.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be"},{"type":"text","text":" "},{"text":"removed entirely. Instead, you can use ","type":"text"},{"code":"Shared.init(_:)","type":"codeVoice"},{"text":" to explicitly unwrap a shared optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard let"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"text":" ","type":"text"},{"type":"text","text":"migrate, use "},{"code":"Shared.init(_:)","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"syntax":"diff"}]}],"metadata":{"title":"Migrating to 1.11","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"abstract":[{"type":"text","text":"The "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"text":" ","type":"text"},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","type":"topic","role":"article","title":"Migrating to 1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"type":"topic","title":"WithViewStore","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","title":"Migrating to 1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true,"type":"reference"},{"text":", and more.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","kind":"article","title":"Migrating to 1.4","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro, and learn how to better leverage case key"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","title":"Migrating to 1.6","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.12","kind":"article","title":"Migrating to 1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","role":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","type":"topic","role":"article","title":"Migrating to 1.17.1","url":"\/documentation\/composablearchitecture\/migratingto1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","title":"Migrating to 1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"text":" ","type":"text"},{"type":"text","text":"concurrency with no warnings or errors."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5","kind":"article","title":"Migrating to 1.5","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" operation on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"topic","role":"article","title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"abstract":[{"type":"text","text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit"},{"type":"text","text":" "},{"text":"navigation helper has been introduced.","type":"text"}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","type":"topic","role":"article","title":"Migrating to 1.18","url":"\/documentation\/composablearchitecture\/migratingto1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"topic","role":"symbol","title":"dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"#Migrating-to-1112":{"url":"#Migrating-to-1112","type":"link","identifier":"#Migrating-to-1112","title":"Migrating to 1.11.2","titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","role":"article","title":"Migrating to 1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"#Supplying-mock-read-only-state-to-previews":{"url":"#Supplying-mock-read-only-state-to-previews","type":"link","identifier":"#Supplying-mock-read-only-state-to-previews","title":"Supplying mock read-only state to previews","titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","type":"topic","role":"article","title":"Migrating to 1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"title":"Migrating to 1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/sharingstate","title":"Sharing state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","title":"Migrating to 1.13","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article","abstract":[{"type":"text","text":"The Composable Architecture now provides first class tools for building features in UIKit,"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}]},"#Mutating-shared-state-concurrently":{"url":"#Mutating-shared-state-concurrently","type":"link","identifier":"#Mutating-shared-state-concurrently","title":"Mutating shared state concurrently","titleInlineContent":[{"type":"text","text":"Mutating shared state concurrently"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","title":"Migrating to 1.10","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","title":"Migrating to 1.16","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"abstract":[{"type":"text","text":"Store internals have been rewritten for performance and future features, and are now compatible with"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" property wrapper."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","type":"topic","role":"article","title":"Migrating to 1.19","url":"\/documentation\/composablearchitecture\/migratingto1.19"}}}