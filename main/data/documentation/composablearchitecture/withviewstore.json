{"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"topicSections":[{"anchor":"Creating-a-view","title":"Creating a view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"],"anchor":"Debugging-view-updates","title":"Debugging view updates"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"title":"Instance Properties","anchor":"Instance-Properties"},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"generated":true}],"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"generated":true,"title":"View containers","anchor":"View-containers"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}]}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ViewState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Content"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"This helper is an alternative to observing the view store manually on your view, which requires","type":"text"},{"text":" ","type":"text"},{"text":"the boilerplate of a custom initializer.","type":"text"}],"type":"paragraph"},{"name":"Important","content":[{"inlineContent":[{"type":"text","text":"It is important to properly leverage the "},{"code":"observe","type":"codeVoice"},{"text":" argument in order to observe","type":"text"},{"text":" ","type":"text"},{"text":"only the state that your view needs to do its job. See the “Performance” section below for more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"information."}],"type":"paragraph"}],"type":"aside","style":"important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following view, which manually observes the store it is handed by constructing"},{"type":"text","text":" "},{"type":"text","text":"a view store in its initializer:"}]},{"syntax":"swift","type":"codeListing","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"]},{"inlineContent":[{"text":"…can be written more simply using ","type":"text"},{"code":"WithViewStore","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"There may be times where the slightly more verbose style of observing a store is preferred"},{"text":" ","type":"text"},{"type":"text","text":"instead of using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"When ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged"},{"type":"text","text":" "},{"text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such instability you should consider manually setting up observation with an"},{"type":"text","text":" "},{"code":"@ObservedObject","type":"codeVoice"},{"text":" property as described above.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Sometimes you may want to observe the state in a store in a context that is not a view","type":"text"},{"type":"text","text":" "},{"text":"builder. In such cases ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" will not work since it is intended only for"},{"type":"text","text":" "},{"text":"SwiftUI views.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An example of this is interfacing with SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"App"},{"text":" protocol, which uses a separate","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@SceneBuilder"},{"type":"text","text":" instead of "},{"code":"@ViewBuilder","type":"codeVoice"},{"text":". In this case you must use an ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note that it is highly discouraged for you to observe ","type":"text"},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"text":" of your root store’s state.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It is almost never needed and will cause many view recomputations leading to poor"},{"type":"text","text":" "},{"type":"text","text":"performance. This is why we construct a separate "},{"code":"SceneState","type":"codeVoice"},{"text":" type that holds onto only the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state that the view needs for rendering. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","type":"reference","isActive":true},{"type":"text","text":" for more information on this"},{"type":"text","text":" "},{"text":"topic.","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"If your view does not need access to any state in the store and only needs to be able to send","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":" at all. Instead, you can send","type":"text"},{"type":"text","text":" "},{"text":"actions directly to a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" like so:","type":"text"}]},{"code":["Button(\"Tap me\") {","  self.store.send(.buttonTapped)","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Performance","level":2,"text":"Performance"},{"type":"paragraph","inlineContent":[{"text":"A common performance pitfall when using the library comes from constructing ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":"s and","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":"s. When constructed naively, using either view store’s initializer","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","type":"reference","isActive":true},{"text":" or the SwiftUI helper ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", it  will observe"},{"text":" ","type":"text"},{"text":"every change to state in the store:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(self.store, observe: { $0 }) { viewStore in","  \/\/ This is executed for every action sent into the system","  \/\/ that causes self.store.state to change.","}"]},{"inlineContent":[{"text":"Most of the time this observes far too much state. A typical feature in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture holds onto not only the state the view needs to present UI, but also state that the"},{"type":"text","text":" "},{"type":"text","text":"feature only needs internally, as well as state of child features embedded in the feature."},{"text":" ","type":"text"},{"text":"Changes to the internal and child state should not cause the view’s body to re-compute since","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that state is not needed in the view."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the root of our application was a tab view, then we could model that in state"},{"text":" ","type":"text"},{"type":"text","text":"as a struct that holds each tab’s state as a property:"}]},{"code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the view only needs to construct the views for each tab, then no view store is even needed"},{"text":" ","type":"text"},{"type":"text","text":"because we can pass scoped stores to each child feature view:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: \\.activity)","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: \\.search)","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: \\.profile)","      )","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This means ","type":"text"},{"code":"AppView","type":"codeVoice"},{"text":" does not actually need to observe any state changes. This view will only be","type":"text"},{"type":"text","text":" "},{"text":"created a single time, whereas if we observed the store then it would re-compute every time a single","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"thing changed in either the activity, search or profile child features."}]},{"inlineContent":[{"text":"If sometime in the future we do actually need some state from the store, we can start to observe","type":"text"},{"text":" ","type":"text"},{"text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we need access to the currently selected tab in state:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can observe this state so that we can construct a binding to "},{"code":"selectedTab","type":"codeVoice"},{"type":"text","text":" for the tab view:"}]},{"type":"codeListing","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: \\.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: \\.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: \\.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"However, this style of state observation is terribly inefficient since ","type":"text"},{"inlineContent":[{"text":"every","type":"text"}],"type":"emphasis"},{"text":" change to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"AppFeature.State"},{"text":" will cause the view to re-compute even though the only piece of state we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actually care about is the "},{"code":"selectedTab","type":"codeVoice"},{"text":". The reason we are observing too much state is because","type":"text"},{"type":"text","text":" "},{"text":"we use ","type":"text"},{"type":"codeVoice","code":"observe: { $0 }"},{"type":"text","text":" in the construction of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"type":"text","text":", which means the view"},{"type":"text","text":" "},{"type":"text","text":"store will observe all of state."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To chisel away at the observed state you can provide a closure for that argument that plucks out"},{"type":"text","text":" "},{"type":"text","text":"the state the view needs. In this case the view only needs a single field:"}]},{"code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the future, the view may need access to more state. For example, suppose "},{"type":"codeVoice","code":"Activity.State"},{"text":" ","type":"text"},{"type":"text","text":"holds onto an "},{"code":"unreadCount","type":"codeVoice"},{"text":" integer to represent how many new activities you have. There’s no","type":"text"},{"type":"text","text":" "},{"type":"text","text":"need to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of "},{"code":"Activity.State","type":"codeVoice"},{"type":"text","text":" to get access to this one field. You can observe just"},{"text":" ","type":"text"},{"text":"the one field.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Technically you can do this by mapping your state into a tuple, but because tuples are not"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" you will need to provide an explicit ","type":"text"},{"code":"removeDuplicates","type":"codeVoice"},{"text":" argument:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["WithViewStore(","  self.store,","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: \\.activity)","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Alternatively, and recommended, you can introduce a lightweight, equatable ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct"},{"type":"text","text":" "},{"text":"nested inside your view whose purpose is to transform the ","type":"text"},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"text":" ","type":"text"},{"type":"text","text":"essentials of what the view needs:"}],"type":"paragraph"},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: \\.activity)","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This gives you maximum flexibility in the future for adding new fields to "},{"type":"codeVoice","code":"ViewState"},{"text":" without","type":"text"},{"text":" ","type":"text"},{"text":"making your view convoluted.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This technique for reducing view re-computations is most effective towards the root of your app","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold"},{"type":"text","text":" "},{"text":"lots of state that its view does not need, such as child features, and leaf features tend to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only hold what’s necessary. If you are going to employ this technique you will get the most"},{"type":"text","text":" "},{"type":"text","text":"benefit by applying it to views closer to the root. At leaf features and views that need access"},{"type":"text","text":" "},{"type":"text","text":"to most of the state, it is fine to continue using "},{"code":"observe: { $0 }","type":"codeVoice"},{"text":" to observe all of the state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the store."}]},{"text":"Overview","type":"heading","anchor":"Overview","level":2}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"metadata":{"title":"WithViewStore","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:22ComposableArchitecture13WithViewStoreV","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"platforms":[]},"references":{"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","title":"View Implementations","kind":"article"},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/body","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","deprecated":true,"title":"body","abstract":[],"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Content"}],"role":"symbol"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","title":"SwiftUICore.View","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"url":"\/documentation\/composablearchitecture\/caselet","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseLet","kind":"identifier"}],"navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"deprecated":true,"role":"symbol","title":"CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"deprecated":true,"title":"ViewStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","title":"SwiftUICore.DynamicViewContent","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","title":"Performance","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"type":"topic","title":"WithViewStore","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"role":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/switchstore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","deprecated":true,"kind":"symbol","title":"SwitchStore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"title":"_printChanges(_:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"_printChanges"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV","text":"WithViewStore"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Content"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)","role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","abstract":[{"text":"Prints debug information to the console whenever the view is computed.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","role":"collectionGroup","kind":"article","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l","conformance":{"constraints":[{"code":"ViewState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"content","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","text":"ViewStore"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":">) -> ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"abstract":[{"text":"Initializes a structure that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into an observable ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" in order"},{"text":" ","type":"text"},{"text":"to compute views from state.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l","title":"init(_:observe:content:file:line:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"title":"init(_:observe:)","type":"topic","conformance":{"constraints":[{"code":"ViewState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"Initializes a view store from a store which observes changes to state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","role":"symbol","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"url":"\/documentation\/composablearchitecture\/navigationlinkstore","deprecated":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"type":"topic","title":"NavigationLinkStore","abstract":[{"text":"A view that controls a navigation presentation.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","role":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/navigationstackstore","navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","kind":"article","title":"DynamicViewContent Implementations","role":"collectionGroup","type":"topic"}}}