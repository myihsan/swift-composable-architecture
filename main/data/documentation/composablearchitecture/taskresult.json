{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is needed because Swiftâ€™s concurrency tools can only express untyped errors, such as"},{"text":" ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" functions and ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":", and so their output can realistically only be bridged to","type":"text"},{"text":" ","type":"text"},{"code":"Result<_, any Error>","type":"codeVoice"},{"text":". However, ","type":"text"},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":" is never "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" since "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"codeVoice","code":"Equatable"},{"text":", and equatability is very important for testing in the Composable Architecture. By","type":"text"},{"type":"text","text":" "},{"text":"defining our own type we get the ability to recover equatability in most situations.","type":"text"}]},{"inlineContent":[{"type":"text","text":"If someday Swift gets typed "},{"type":"codeVoice","code":"throws"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"text":" ","type":"text"},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You typically use this type as the payload of an action which receives a response from an"},{"type":"text","text":" "},{"type":"text","text":"effect:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"]},{"inlineContent":[{"type":"text","text":"Then you can model your dependency as using simple "},{"type":"codeVoice","code":"async"},{"type":"text","text":" and "},{"code":"throws","type":"codeVoice"},{"text":" functionality:","type":"text"}],"type":"paragraph"},{"code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And finally you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"type":"text","text":"effect in the reducer that invokes the "},{"code":"numberFact","type":"codeVoice"},{"text":" endpoint and wraps its response in a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" by using its catching initializer, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Equality","type":"heading","anchor":"Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The biggest downside to using an untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" in a result type is that the result will not"},{"type":"text","text":" "},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"type":"text","text":" "},{"text":"that use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" in their actions with the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" does extra work to try to maintain equatability when possible. If the underlying","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type masked by the "},{"type":"codeVoice","code":"Error"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", then it will use that "},{"code":"Equatable","type":"codeVoice"},{"text":" conformance","type":"text"},{"type":"text","text":" "},{"text":"on two failures. Luckily, most errors thrown by Appleâ€™s frameworks are already equatable, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because errors are typically simple value types, it is usually possible to have the compiler"},{"type":"text","text":" "},{"type":"text","text":"synthesize a conformance for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are testing the unhappy path of a feature that feeds a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" back into the","type":"text"},{"type":"text","text":" "},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ðŸ›‘","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ ðŸ›‘ 'RefreshFailure' is not equatable"]},{"type":"paragraph","inlineContent":[{"text":"To get a passing test, explicitly conform your custom error to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol:"}]},{"code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ ðŸ‘ˆ","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ âœ…","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"topicSections":[{"title":"Representing a task result","anchor":"Representing-a-task-result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"title":"Converting a throwing expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"],"anchor":"Converting-a-throwing-expression"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"anchor":"Accessing-a-results-value","title":"Accessing a resultâ€™s value"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"],"anchor":"Transforming-results","title":"Transforming results"},{"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"title":"Default Implementations","generated":true}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"metadata":{"platforms":[],"modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"role":"symbol","roleHeading":"Enumeration","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"symbolKind":"enum","externalID":"s:22ComposableArchitecture10TaskResultO","title":"TaskResult"},"seeAlsoSections":[{"anchor":"Creating-an-effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"],"title":"Creating an effect","generated":true}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","interfaceLanguage":"swift"},"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s ","type":"text"},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"type":"topic","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Success"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"any Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Transforms a "},{"code":"TaskResult","type":"codeVoice"},{"type":"text","text":" into a "},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","title":"init(_:)","url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"text":">)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"type":"topic","deprecated":true,"role":"symbol","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" into a "},{"code":"TaskResult","type":"codeVoice"},{"text":", erasing its ","type":"text"},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"kind":"symbol","title":"init(_:)","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Failure","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Result","preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Success","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":">)","kind":"text"}]},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"kind":"article","type":"topic","title":"Hashable Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","abstract":[]},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"text":") -> ","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation."}],"type":"topic","kind":"symbol","title":"map(_:)"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","title":"CasePaths.CasePathable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducerâ€™s domain."}],"navigatorTitle":[{"kind":"identifier","text":"EffectOf"}],"url":"\/documentation\/composablearchitecture\/effectof","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","type":"topic","title":"EffectOf","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EffectOf","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"title":"init(catching:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"catching"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","kind":"symbol","abstract":[{"text":"Creates a new task result by evaluating an async throwing closure, capturing the returned","type":"text"},{"type":"text","text":" "},{"text":"value as a success, or any thrown error as a failure.","type":"text"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"title":"Effect","role":"symbol","abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"failure","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"text":")","kind":"text"}],"abstract":[{"text":"A failure, storing an error.","type":"text"}],"title":"TaskResult.failure(_:)","role":"symbol","deprecated":true},"doc://ComposableArchitecture/SH":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}],"url":"\/documentation\/composablearchitecture\/effect\/send(_:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","type":"topic","title":"send(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"abstract":[{"text":"Returns the success value as a throwing property.","type":"text"}],"deprecated":true,"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Success","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/value","role":"symbol","title":"value","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","type":"topic","title":"CasePathable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","kind":"article","abstract":[],"role":"collectionGroup"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation and","type":"text"},{"type":"text","text":" "},{"text":"unwrapping the produced result.","type":"text"}],"type":"topic","kind":"symbol","title":"flatMap(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","type":"topic","title":"Equatable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","kind":"article","abstract":[],"role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"topic","title":"TaskResult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"text":"return an effect, but you donâ€™t need to do anything.","type":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"topic","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"none","kind":"identifier"},{"kind":"text","text":": "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"success","kind":"identifier"},{"kind":"text","text":"("},{"text":"Success","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","role":"symbol","kind":"symbol","deprecated":true,"title":"TaskResult.success(_:)","abstract":[{"type":"text","text":"A success, storing a "},{"code":"Success","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)"}}}