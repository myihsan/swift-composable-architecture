{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindingstate"]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"title":"Bindings","anchor":"Bindings"}],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)"],"title":"Initializers","generated":true,"anchor":"Initializers"},{"generated":true,"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue"]},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"],"generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Along with an action type that conforms to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" protocol, this type can be"},{"type":"text","text":" "},{"type":"text","text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple"},{"text":" ","type":"text"},{"text":"mutable fields on state.","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"text":"It is not necessary to annotate ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" field with "},{"code":"@BindingState","type":"codeVoice"},{"type":"text","text":", and in fact it is"},{"text":" ","type":"text"},{"type":"text","text":"not recommended. Marking a field with the property wrapper makes it instantly mutable from the"},{"type":"text","text":" "},{"type":"text","text":"outside, which may hurt the encapsulation of your feature. It is best to limit the usage of"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper to only those fields that need to have bindings derived for handing to"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI components."}],"type":"paragraph"}],"type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"Read "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"text":" for more information.","type":"text"}],"type":"paragraph"}]}],"sections":[],"metadata":{"externalID":"s:22ComposableArchitecture12BindingStateV","roleHeading":"Structure","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"BindingState"}],"title":"BindingState","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingState","kind":"identifier"}],"platforms":[]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving bindings directly from stores using '@ObservableState'. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#BindingState"}]}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Equatable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","title":"Equatable Implementations","kind":"article","type":"topic","abstract":[],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/bindingstate\/equatable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","title":"BindingState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingState"}],"kind":"symbol","role":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/bindingstate","abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"navigatorTitle":[{"kind":"identifier","text":"BindingState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomReflectable-Implementations":{"kind":"article","title":"CustomReflectable Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/bindingstate\/customreflectable-implementations","type":"topic"},"doc://ComposableArchitecture/SE":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SE","title":"Swift.Encodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","title":"Working with SwiftUI bindings","kind":"article","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindings","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Decodable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","abstract":[],"type":"topic","kind":"article","role":"collectionGroup","title":"Decodable Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/decodable-implementations"},"doc://ComposableArchitecture/10CustomDump0aB13RepresentableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","title":"CustomDump.CustomDumpRepresentable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","role":"collectionGroup","kind":"article","title":"Deprecations"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDumpRepresentable-Implementations":{"type":"topic","kind":"article","title":"CustomDumpRepresentable Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/bindingstate\/customdumprepresentable-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations"},"doc://ComposableArchitecture/Se":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/Se","title":"Swift.Decodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Hashable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations","abstract":[],"type":"topic","kind":"article","role":"collectionGroup","title":"Hashable Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/hashable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Encodable-Implementations":{"abstract":[],"role":"collectionGroup","title":"Encodable Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/encodable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","type":"topic","kind":"article"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","abstract":[{"text":"An action type that exposes a ","type":"text"},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"text":".","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"title":"BindableAction","kind":"symbol","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/projectedValue":{"url":"\/documentation\/composablearchitecture\/bindingstate\/projectedvalue","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","type":"topic","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"projectedValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"BindingState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"kind":"symbol","abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/init(wrappedValue:fileID:filePath:line:column:)":{"title":"init(wrappedValue:fileID:filePath:line:column:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate\/init(wrappedvalue:fileid:filepath:line:column:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":")","kind":"text"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Creates bindable state from the value of another bindable state."}],"kind":"symbol"},"doc://ComposableArchitecture/SH":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingViewStore"}],"url":"\/documentation\/composablearchitecture\/bindingviewstore","title":"BindingViewStore","role":"symbol","abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"text":" values for a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"text":".","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/wrappedValue":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue","abstract":[{"type":"text","text":"The underlying value wrapped by the binding state."}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","deprecated":true,"role":"symbol","title":"wrappedValue","url":"\/documentation\/composablearchitecture\/bindingstate\/wrappedvalue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","type":"topic","title":"CustomDebugStringConvertible Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/bindingstate\/customdebugstringconvertible-implementations"},"doc://ComposableArchitecture/s17CustomReflectableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","title":"Swift.CustomReflectable"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"deprecated":true,"title":"ViewStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","title":"BindingViewState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindingviewstate","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of view state that can be directly"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"url":"\/documentation\/composablearchitecture\/bindingaction","title":"BindingAction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}]}}}