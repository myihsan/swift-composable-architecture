{"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"send(_:while:)","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"platforms":[],"symbolKind":"method"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}]}],"sections":[],"seeAlsoSections":[{"title":"Sending actions","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"],"anchor":"Sending-actions"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"action","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An action.","type":"text"}]}],"name":"action"},{"content":[{"inlineContent":[{"type":"text","text":"A predicate on "},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" that determines for how long this method should"},{"type":"text","text":" "},{"type":"text","text":"suspend."}],"type":"paragraph"}],"name":"predicate"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while work"},{"type":"text","text":" "},{"text":"is being performed in an effect. One common example of this is using SwiftUI’s ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"type":"text","text":" "},{"text":"method, which shows a loading indicator on the screen while work is being performed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh"},{"type":"text","text":" "},{"text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(Result<String, any Error>)","  }","  @Dependency(\\.fetch) var fetch","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .pulledToRefresh:","        state.isLoading = true","        return .run { send in","          await send(.receivedResponse(Result { try await self.fetch() }))","        }","","      case let .receivedResponse(result):","        state.isLoading = false","        state.response = try? result.value","        return .none","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note that we keep track of an ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" boolean in our state so that we know exactly when"},{"text":" ","type":"text"},{"text":"the network response is being performed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view can show the fact in a "},{"code":"List","type":"codeVoice"},{"text":", if it’s present, and we can use the ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here we’ve used the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"},{"type":"text","text":" method to suspend while the "},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" state is"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":". Once that piece of state flips back to "},{"type":"codeVoice","code":"false"},{"text":" the method will resume, signaling to","type":"text"},{"text":" ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"type":"text","text":" that the work has finished which will cause the loading indicator to disappear."}],"type":"paragraph"}]}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"deprecated":true,"title":"ViewStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"abstract":[{"text":"Suspends the current task while a predicate on state is ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"title":"yield(while:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"yield","kind":"identifier"},{"kind":"text","text":"("},{"text":"while","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"ViewState","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","role":"collectionGroup","kind":"article","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","abstract":[{"text":"Sends an action into the store and then suspends while a piece of state is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"kind":"symbol","title":"send(_:while:)","role":"symbol","deprecated":true,"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)","type":"topic","title":"send(_:)","abstract":[{"type":"text","text":"Sends an action to the store."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}