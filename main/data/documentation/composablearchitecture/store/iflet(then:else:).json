{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"unwrap","kind":"internalParam"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":" = {}) -> any ","kind":"text"},{"text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"name":"unwrap","content":[{"type":"paragraph","inlineContent":[{"text":"A function that is called with a store of non-optional state when the store’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state is non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", or whenever it goes from "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"A function that is called when the store’s optional state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", or whenever it"},{"type":"text","text":" "},{"type":"text","text":"goes from non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"else"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"text":"A cancellable that maintains a subscription to updates whenever the store’s state","type":"text"},{"text":" ","type":"text"},{"text":"goes from ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and vice versa, so that the caller can react to these changes."}],"type":"paragraph"}]},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"If the store’s state is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", it will safely unwrap the value and bundle it into a new"},{"type":"text","text":" "},{"text":"store of non-optional state that is passed to the first closure. If the store’s state is","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"text":", the second closure is called instead.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This method is useful for handling navigation in UIKit. The state for a screen the user wants"},{"text":" ","type":"text"},{"type":"text","text":"to navigate to can be held as an optional value in the parent, and when that value goes from"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"code":"nil","type":"codeVoice"},{"text":", or non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to "},{"code":"nil","type":"codeVoice"},{"text":", you can update the navigation stack accordingly:","type":"text"}],"type":"paragraph"},{"code":["class ParentViewController: UIViewController {","  let store: Store<ParentState, ParentAction>","  var cancellables: Set<AnyCancellable> = []","  \/\/ ...","  func viewDidLoad() {","    \/\/ ...","    store","      .scope(state: \\.optionalChild, action: \\.child)","      .ifLet(","        then: { [weak self] childStore in","          self?.navigationController?.pushViewController(","            ChildViewController(store: childStore),","            animated: true","          )","        },","        else: { [weak self] in","          guard let self else { return }","          navigationController?.popToViewController(self, animated: true)","        }","      )","      .store(in: &cancellables)","  }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/iflet(then:else:)"]}],"kind":"symbol","metadata":{"platforms":[],"roleHeading":"Instance Method","extendedModule":"ComposableArchitecture","title":"ifLet(then:else:)","symbolKind":"method","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"title":"Combine integration","anchor":"Combine-integration","generated":true}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'observe' and 'if let store.scope', instead."}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration","kind":"article","role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"title":"publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"kind":"symbol","type":"topic","title":"publisher","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A publisher that emits when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"text":" ","type":"text"},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"title":"ifLet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"role":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"kind":"article","title":"Deprecations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations","abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"url":"\/documentation\/composablearchitecture\/storedeprecations"}}}