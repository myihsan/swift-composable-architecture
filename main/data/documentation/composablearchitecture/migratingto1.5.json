{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.5"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"},"abstract":[{"type":"text","text":"Update your code to make use of the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" operation on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs","type":"text"},{"type":"text","text":" "},{"text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest","type":"text"},{"type":"text","text":" "},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Many APIs have been soft-deprecated in this release and will be hard-deprecated in"},{"type":"text","text":" "},{"type":"text","text":"a future minor release. We highly recommend updating your use of deprecated APIs to their newest"},{"type":"text","text":" "},{"text":"version as quickly as possible.","type":"text"}],"type":"paragraph"}],"style":"important"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Store-scoping-with-key-paths","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Scoping-performance"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Enum-driven-navigation-APIs","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Store scoping with key paths","type":"heading","level":3,"anchor":"Store-scoping-with-key-paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to version 1.5 of the Composable Architecture, one was allowed to"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"type":"text","text":" a store with any kind of closures that"},{"type":"text","text":" "},{"type":"text","text":"transform the parent state to the child state, and child actions into parent actions:"}]},{"syntax":"swift","code":["store.scope(","  state: (State) -> ChildState,","  action: (ChildAction) -> Action",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In practice you could typically use key paths for the "},{"type":"codeVoice","code":"state"},{"type":"text","text":" transformation since key path literals"},{"type":"text","text":" "},{"type":"text","text":"can be promoted to closures. That means often scoping looked something like this:"}]},{"type":"codeListing","code":["\/\/ ⚠️ Deprecated API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: { .child($0) }","  )",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, as of version 1.5 of the Composable Architecture, the version of"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","type":"reference"},{"type":"text","text":" that takes two closures is"},{"text":" ","type":"text"},{"inlineContent":[{"text":"soft-deprecated","type":"text"}],"type":"strong"},{"text":". Instead, you are to use the version of","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":" that takes a key path for the "},{"type":"codeVoice","code":"state"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"argument, and a case key path for the ","type":"text"},{"type":"codeVoice","code":"action"},{"text":" argument.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is easiest to do when you are using the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro with your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature because then case key paths are automatically generated for each case of your action enum."},{"type":"text","text":" "},{"type":"text","text":"The above construction of "},{"type":"codeVoice","code":"ChildView"},{"type":"text","text":" now becomes:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ New API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: \\.child","  )",")"]},{"type":"paragraph","inlineContent":[{"text":"The syntax is now shorter and more symmetric, and there is a hidden benefit too. Because key paths","type":"text"},{"type":"text","text":" "},{"text":"are ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", we are able to cache the store created by "},{"type":"codeVoice","code":"scope"},{"text":". This means if the store is scoped","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"again with the same "},{"code":"state","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"action","type":"codeVoice"},{"type":"text","text":" arguments, we can skip creating a new store and instead"},{"type":"text","text":" "},{"type":"text","text":"return the previously created one. This provides a lot of benefits, such as better performance, and"},{"type":"text","text":" "},{"type":"text","text":"a stable identity for features."}]},{"inlineContent":[{"text":"There are some times when changing to this new scoping operator may be difficult. For example, if","type":"text"},{"type":"text","text":" "},{"text":"you perform additional work in your scoping closure so that a simple key path does not work:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ChildView(","  store: store.scope(","    state: { ChildFeature(state: $0.child) }, ","    action: { .child($0) }","  )",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be handled by moving the work in the closure to a computed property on your state:"}]},{"syntax":"swift","type":"codeListing","code":["extension State {","  var childFeature: ChildFeature {","    ChildFeature(state: self.child) ","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now the key path syntax works just fine:"}]},{"type":"codeListing","syntax":"swift","code":["ChildView(","  store: store.scope(","    state: \\.childFeature, ","    action: \\.child","  )",")"]},{"inlineContent":[{"type":"text","text":"Another complication is if you are using data from "},{"type":"emphasis","inlineContent":[{"text":"outside","type":"text"}]},{"type":"text","text":" the closure, "},{"inlineContent":[{"type":"text","text":"inside"}],"type":"emphasis"},{"type":"text","text":" the closure:"}],"type":"paragraph"},{"syntax":"swift","code":["ChildView(","  store: store.scope(","    state: { ","      ChildFeature(","        settings: viewStore.settings,","        state: $0.child","      ) ","    }, ","    action: { .child($0) }","  )",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this situation you can add a subscript to your state so that you can pass that data into it:","type":"text"}]},{"syntax":"swift","code":["extension State {","  subscript(settings settings: Settings) -> ChildFeature {","    ChildFeature(","      settings: settings,","      state: self.child","    )","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can use a subscript key path to perform the scoping:","type":"text"}]},{"code":["ChildView(","  store: store.scope(","    state: \\.[settings: viewStore.settings], ","    action: \\.child","  )",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Another common case you may encounter is when dealing with collections. It is common in the"},{"text":" ","type":"text"},{"text":"Composable Architecture to use an ","type":"text"},{"code":"IdentifiedArray","type":"codeVoice"},{"type":"text","text":" in your feature’s state and an"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference"},{"type":"text","text":" in your feature’s actions (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"info on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":"). If you needed to scope your store down to one specific row of the"},{"text":" ","type":"text"},{"text":"identified domain, previously you would have done so like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.scope(","  state: \\.rows[id: id],","  action: { .rows(.element(id: id, action: $0)) }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With case key paths it can be done simply like this:"}]},{"code":["store.scope(","  state: \\.rows[id: id],","  action: \\.rows[id: id]",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These tricks should be enough for you to rewrite all of your store scopes using key paths, but if"},{"type":"text","text":" "},{"type":"text","text":"you have any problems feel free to open a"},{"type":"text","text":" "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"type":"text","text":" on the repo."}]},{"anchor":"Scoping-performance","level":2,"type":"heading","text":"Scoping performance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The performance characteristics for store scoping have changed in this release. The primary (and"},{"type":"text","text":" "},{"text":"intended) way of scoping is along ","type":"text"},{"inlineContent":[{"type":"text","text":"stored"}],"type":"emphasis"},{"text":" properties of child features. A very basic example of this","type":"text"},{"type":"text","text":" "},{"text":"is the following:","type":"text"}]},{"code":["ChildView(","  store: store.scope(state: \\.child, action: \\.child)",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A less common (and less supported) form of scoping is along "},{"type":"emphasis","inlineContent":[{"type":"text","text":"computed"}]},{"type":"text","text":" properties, for example like"},{"text":" ","type":"text"},{"type":"text","text":"this:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension ParentFeature.State {","  var computedChild: ChildFeature.State {","    ChildFeature.State(","      \/\/ Heavy computation here...","    )","  }","}","","ChildView(","  store: store.scope(state: \\.computedChild, action: \\.child)",")"]},{"type":"paragraph","inlineContent":[{"text":"This style of scoping will incur a bit of a performance cost in 1.5 and moving forward. The cost","type":"text"},{"text":" ","type":"text"},{"text":"is greater the closer your scoping is to the root of your application. Leaf node features will not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incur as much of a cost."}]},{"type":"paragraph","inlineContent":[{"text":"See the dedicated article ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping"},{"type":"text","text":" for more information."}]},{"level":2,"type":"heading","anchor":"Enum-driven-navigation-APIs","text":"Enum-driven navigation APIs"},{"type":"paragraph","inlineContent":[{"text":"Prior to version 1.5 of the library, using enum state with navigation view modifiers, such as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"sheet"},{"type":"text","text":", "},{"code":"popover","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":", etc, was quite verbose. You first needed to supply a"},{"text":" ","type":"text"},{"text":"store scoped to the destination domain, and then further provide transformations for isolating the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"case of the state enum to drive the navigation, as well as a transformation for embedding child"},{"type":"text","text":" "},{"type":"text","text":"actions back into the destination domain:"}]},{"code":["\/\/ ⚠️ Deprecated API",".sheet(","  store: store.scope(state: \\.$destination, action: { .destination($0) }),","  state: \\.editForm,","  action: { .editForm($0) }",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The navigation view modifiers that take ","type":"text"},{"type":"codeVoice","code":"store"},{"type":"text","text":", "},{"code":"state","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"action"},{"text":" arguments are now deprecated,","type":"text"},{"type":"text","text":" "},{"text":"and instead you can do it all with a single ","type":"text"},{"type":"codeVoice","code":"store"},{"type":"text","text":" argument:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ New API",".sheet(","  store: store.scope(","    state: \\.$destination.editForm, ","    action: \\.destination.editForm","  )",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All navigation APIs that take 3 arguments for the "},{"code":"store","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"state"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"action"},{"type":"text","text":" have been"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"soft-deprecated"}],"type":"strong"},{"text":" and instead you should make use of the version of the APIs that take a single","type":"text"},{"type":"text","text":" "},{"code":"store","type":"codeVoice"},{"type":"text","text":" argument. This includes:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"alert(store:state:action:)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"confirmationDialog(store:state:action:)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"fullScreenCover(store:state:action:)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"navigationDestination(store:state:action)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"popover(store:state:action:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"sheet(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"type":"text","text":"."},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference"},{"text":".","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","type":"reference"}]}]}],"type":"unorderedList"}]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.5","roleHeading":"Article","role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"type":"topic","title":"PresentationState","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"#Enum-driven-navigation-APIs":{"title":"Enum-driven navigation APIs","identifier":"#Enum-driven-navigation-APIs","type":"link","titleInlineContent":[{"text":"Enum-driven navigation APIs","type":"text"}],"url":"#Enum-driven-navigation-APIs"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","title":"Migrating to 1.10","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"title":"discussion","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link","titleInlineContent":[{"text":"discussion","type":"text"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"deprecated":true,"type":"topic","role":"symbol","title":"scope(state:action:)","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","title":"PresentationAction","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationAction"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","kind":"section","title":"Identified actions","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},"#Scoping-performance":{"title":"Scoping performance","identifier":"#Scoping-performance","type":"link","titleInlineContent":[{"text":"Scoping performance","type":"text"}],"url":"#Scoping-performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"title":"Migrating to 1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","title":"Migrating to 1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"text":" ","type":"text"},{"type":"text","text":"concurrency with no warnings or errors."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"topic","role":"symbol","title":"dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","role":"article","title":"Migrating to 1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#Store-scoping":{"title":"Store scoping","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping","type":"topic","url":"\/documentation\/composablearchitecture\/performance#Store-scoping","kind":"section","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"topic","role":"article","title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.12","kind":"article","title":"Migrating to 1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","role":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"title":"IdentifiedAction","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedAction"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","title":"init(_:state:action:then:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"text":", ","kind":"text"},{"text":"IfContent","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","kind":"typeIdentifier","text":"PresentationState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": (","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"IfContent"},{"text":")","kind":"text"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:)","abstract":[{"text":"Initializes an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and state can further"},{"type":"text","text":" "},{"text":"be extracted from the destination state, ","type":"text"},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":" it matches a particular case of an enum."}],"role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"abstract":[{"type":"text","text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit"},{"type":"text","text":" "},{"text":"navigation helper has been introduced.","type":"text"}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","type":"topic","role":"article","title":"Migrating to 1.18","url":"\/documentation\/composablearchitecture\/migratingto1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","title":"Migrating to 1.13","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article","abstract":[{"type":"text","text":"The Composable Architecture now provides first class tools for building features in UIKit,"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"abstract":[{"type":"text","text":"The "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"text":" ","type":"text"},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","type":"topic","role":"article","title":"Migrating to 1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","title":"Migrating to 1.16","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"abstract":[{"type":"text","text":"Store internals have been rewritten for performance and future features, and are now compatible with"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" property wrapper."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","type":"topic","role":"article","title":"Migrating to 1.19","url":"\/documentation\/composablearchitecture\/migratingto1.19"},"#Store-scoping-with-key-paths":{"title":"Store scoping with key paths","identifier":"#Store-scoping-with-key-paths","type":"link","titleInlineContent":[{"text":"Store scoping with key paths","type":"text"}],"url":"#Store-scoping-with-key-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"type":"topic","title":"WithViewStore","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","kind":"article","title":"Migrating to 1.4","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro, and learn how to better leverage case key"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","title":"Migrating to 1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true,"type":"reference"},{"text":", and more.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","title":"Migrating to 1.6","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:else:)":{"title":"init(_:state:action:then:else:)","type":"topic","abstract":[{"type":"text","text":"Initializes an "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":" view that computes content depending on if a store of","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and state can further"},{"type":"text","text":" "},{"type":"text","text":"be extracted from the destination state, "},{"inlineContent":[{"text":"e.g.","type":"text"}],"type":"emphasis"},{"text":" it matches a particular case of an enum.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"IfContent"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElseContent"},{"text":">(","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":") -> ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"IfContent","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"ElseContent","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:else:)","deprecated":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","type":"topic","role":"article","title":"Migrating to 1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","type":"topic","role":"article","title":"Migrating to 1.17.1","url":"\/documentation\/composablearchitecture\/migratingto1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"}}}