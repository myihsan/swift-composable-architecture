{"topicSections":[{"title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"anchor":"Combine-integration"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uikit"]}],"kind":"article","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"],"title":"Integrations","generated":true,"anchor":"Integrations"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the Composable Architecture was designed with SwiftUI in mind, it comes with tools to"},{"text":" ","type":"text"},{"type":"text","text":"integrate into application code written in UIKit."}]}],"kind":"content"}],"metadata":{"roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"ComposableArchitecture"}],"title":"UIKit Integration"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","role":"article","title":"Adopting Swift concurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/observationbackport","title":"Observation backport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"title":"publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"text":" ","type":"text"},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"title":"ifLet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"role":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"kind":"symbol","type":"topic","title":"publisher","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A publisher that emits when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}