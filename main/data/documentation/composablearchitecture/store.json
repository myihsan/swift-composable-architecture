{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"attribute","text":"@dynamicMemberLookup"},{"kind":"text","text":" "},{"text":"@preconcurrency","kind":"attribute"},{"text":" ","kind":"text"},{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"You will typically construct a single one of these at the root of your application:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      RootView(","        store: Store(initialState: AppFeature.State()) {","          AppFeature()","        }","      )","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and then use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" method to derive more focused stores that can be"},{"type":"text","text":" "},{"type":"text","text":"passed to subviews."}]},{"text":"Scoping","type":"heading","level":3,"anchor":"Scoping"},{"type":"paragraph","inlineContent":[{"text":"The most important operation defined on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" is the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which allows you to transform a store into one that deals with child state and actions. This is"},{"type":"text","text":" "},{"text":"necessary for passing stores to subviews that only care about a small portion of the entire","type":"text"},{"type":"text","text":" "},{"text":"application’s domain.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if an application has a tab view at its root with tabs for activity, search, and"},{"type":"text","text":" "},{"text":"profile, then we can model the domain like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var profile: Profile.State","    var search: Search.State","  }","","  enum Action {","    case activity(Activity.Action)","    case profile(Profile.Action)","    case search(Search.Action)","  }","","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"We can construct a view for each of these domains by applying "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"a store that holds onto the full app domain in order to transform it into a store for each","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"subdomain:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    TabView {","      ActivityView(","        store: store.scope(state: \\.activity, action: \\.activity)","      )","      .tabItem { Text(\"Activity\") }","","      SearchView(","        store: store.scope(state: \\.search, action: \\.search)","      )","      .tabItem { Text(\"Search\") }","","      ProfileView(","        store: store.scope(state: \\.profile, action: \\.profile)","      )","      .tabItem { Text(\"Profile\") }","    }","  }","}"]},{"level":3,"anchor":"Thread-safety","text":"Thread safety","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Store"},{"type":"text","text":" class is not thread-safe, and so all interactions with an instance of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"(including all of its child stores) must be done on the same thread the store was created on."},{"type":"text","text":" "},{"type":"text","text":"Further, if the store is powering a SwiftUI or UIKit view, as is customary, then all"},{"text":" ","type":"text"},{"text":"interactions must be done on the ","type":"text"},{"inlineContent":[{"type":"text","text":"main"}],"type":"emphasis"},{"type":"text","text":" thread."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The reason stores are not thread-safe is due to the fact that when an action is sent to a store,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a reducer is run on the current state, and this process cannot be done from multiple threads."},{"type":"text","text":" "},{"type":"text","text":"It is possible to make this process thread-safe by introducing locks or queues, but this"},{"text":" ","type":"text"},{"type":"text","text":"introduces new complications:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If done simply with "},{"type":"codeVoice","code":"DispatchQueue.main.async"},{"type":"text","text":" you will incur a thread hop even when you are"},{"type":"text","text":" "},{"text":"already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sometimes you are required to do work synchronously, such as in animation blocks."}]}]},{"content":[{"inlineContent":[{"text":"It is possible to create a scheduler that performs its work immediately when on the main","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"thread and otherwise uses "},{"code":"DispatchQueue.main.async","type":"codeVoice"},{"type":"text","text":" ("},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"text":", see Combine Schedulers’","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","isActive":true,"type":"reference"},{"text":").","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This introduces a lot more complexity, and should probably not be adopted without having a very","type":"text"},{"text":" ","type":"text"},{"text":"good reason.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why we require all actions be sent from the same thread. This requirement is in the same"},{"type":"text","text":" "},{"type":"text","text":"spirit of how "},{"code":"URLSession","type":"codeVoice"},{"type":"text","text":" and other Apple APIs are designed. Those APIs tend to deliver their"},{"text":" ","type":"text"},{"text":"outputs on whatever thread is most convenient for them, and then it is your responsibility to","type":"text"},{"text":" ","type":"text"},{"text":"dispatch back to the main queue if that’s what you need. The Composable Architecture makes you","type":"text"},{"type":"text","text":" "},{"text":"responsible for making sure to send actions on the main thread. If you are using an effect that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may deliver its output on a non-main thread, you must explicitly perform "},{"type":"codeVoice","code":".receive(on:)"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"order to force it back on the main thread."}]},{"inlineContent":[{"text":"This approach makes the fewest number of assumptions about how effects are created and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some"},{"type":"text","text":" "},{"type":"text","text":"testing benefits. If your effects are not responsible for their own scheduling, then in tests"},{"text":" ","type":"text"},{"type":"text","text":"all of the effects would run synchronously and immediately. You would not be able to test how"},{"text":" ","type":"text"},{"text":"multiple in-flight effects interleave with each other and affect the state of your application.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, by leaving scheduling out of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" we get to test these aspects of our effects"},{"text":" ","type":"text"},{"text":"if we so desire, or we can ignore if we prefer. We have that flexibility.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Thread safety checks","anchor":"Thread-safety-checks","level":4},{"type":"paragraph","inlineContent":[{"text":"The store performs some basic thread safety checks in order to help catch mistakes. Stores","type":"text"},{"type":"text","text":" "},{"text":"constructed via the initializer ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","type":"reference"},{"type":"text","text":" are assumed"},{"type":"text","text":" "},{"type":"text","text":"to run only on the main thread, and so a check is executed immediately to make sure that is the"},{"type":"text","text":" "},{"type":"text","text":"case. Further, all actions sent to the store and all scopes (see "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the store are also checked to make sure that work is performed on the main thread."}]},{"level":3,"anchor":"ObservableObject-conformance","text":"ObservableObject conformance","type":"heading"},{"inlineContent":[{"type":"text","text":"The store conforms to "},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" but is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" observable via the "},{"code":"@ObservedObject","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property wrapper. This conformance is completely inert and its sole purpose is to allow stores"},{"type":"text","text":" "},{"type":"text","text":"to be held in SwiftUI’s "},{"code":"@StateObject","type":"codeVoice"},{"text":" property wrapper.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Instead, stores should be observed through Swift’s Observation framework (or the Perception","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"package when targeting iOS <17) by applying the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"type":"text","text":" macro to your feature’s"},{"type":"text","text":" "},{"text":"state.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/store"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/7Combine16ObservableObjectP","doc:\/\/ComposableArchitecture\/11Observation10ObservableP","doc:\/\/ComposableArchitecture\/14PerceptionCore11PerceptibleP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s12IdentifiableP","doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo","title":"Conforms To"}],"topicSections":[{"anchor":"Creating-a-store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"],"title":"Creating a store"},{"title":"Accessing state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)"],"anchor":"Accessing-state"},{"title":"Sending actions","anchor":"Sending-actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask"]},{"anchor":"Scoping-stores","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case"],"title":"Scoping stores"},{"anchor":"Combine-integration","title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"],"anchor":"Deprecated-interfaces","title":"Deprecated interfaces"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ObservableObject-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"metadata":{"roleHeading":"Class","title":"Store","symbolKind":"class","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture5StoreC","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"],"anchor":"State-management"}],"kind":"symbol","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"references":{"doc://ComposableArchitecture/14PerceptionCore11PerceptibleP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/14PerceptionCore11PerceptibleP","title":"PerceptionCore.Perceptible"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"kind":"symbol","type":"topic","title":"send(_:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","url":"\/documentation\/composablearchitecture\/store\/send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"text":"StoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"title":"ObservableState()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ObservableState","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ObservableObject-Implementations":{"kind":"article","type":"topic","title":"ObservableObject Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ObservableObject-Implementations","url":"\/documentation\/composablearchitecture\/store\/observableobject-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/init(initialState:reducer:withDependencies:)":{"url":"\/documentation\/composablearchitecture\/store\/init(initialstate:reducer:withdependencies:)","type":"topic","title":"init(initialState:reducer:withDependencies:)","abstract":[{"text":"Initializes a store from an initial state and a reducer.","type":"text"}],"fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"text":"initialState","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"reducer","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"text":"withDependencies","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?)","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/subscript(dynamicMember:)-655ef":{"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]},"type":"topic","title":"subscript(dynamicMember:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","url":"\/documentation\/composablearchitecture\/store\/subscript(dynamicmember:)-655ef","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"dynamicMember","kind":"externalParam"},{"kind":"text","text":" _: "},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"url":"\/documentation\/composablearchitecture\/observablestate","type":"topic","title":"ObservableState","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","navigatorTitle":[{"kind":"identifier","text":"ObservableState"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"url":"\/documentation\/composablearchitecture\/store\/case","title":"case","abstract":[{"type":"text","text":"A destructurable view of a store on a collection of cases."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","kind":"typeIdentifier","text":"StateReducer"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa","text":"CaseScope"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CaseReducerState"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/CustomDebugStringConvertible-Implementations":{"kind":"article","type":"topic","title":"CustomDebugStringConvertible Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","url":"\/documentation\/composablearchitecture\/store\/customdebugstringconvertible-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:animation:)":{"kind":"symbol","title":"send(_:animation:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"animation"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"abstract":[{"type":"text","text":"Sends an action to the store with a given animation."}],"url":"\/documentation\/composablearchitecture\/store\/send(_:animation:)"},"doc://ComposableArchitecture/s12IdentifiableP":{"title":"Swift.Identifiable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s12IdentifiableP"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/sharingstate","title":"Sharing state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-3yvuf":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-3yvuf","title":"scope(state:action:fileID:filePath:line:column:)","abstract":[{"text":"Scopes the store to optional child state and actions.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">?"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"kind":"article","title":"Deprecations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations","abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"url":"\/documentation\/composablearchitecture\/storedeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Hashable-Implementations":{"kind":"article","type":"topic","title":"Hashable Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","url":"\/documentation\/composablearchitecture\/store\/hashable-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-2ym6k":{"abstract":[{"type":"text","text":"Scopes the store of an identified collection to a collection of stores."}],"title":"scope(state:action:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-2ym6k","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ElementID","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ElementState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ElementID"},{"kind":"text","text":", "},{"text":"ElementState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"IdentifiedAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"kind":"text","text":"<"},{"text":"ElementID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"RandomAccessCollection","preciseIdentifier":"s:Sk","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"ElementState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"text":">>\n","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreTask":{"url":"\/documentation\/composablearchitecture\/storetask","type":"topic","title":"StoreTask","abstract":[{"text":"The type returned from ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","isActive":true},{"type":"text","text":" that represents the lifecycle of the effect"},{"text":" ","type":"text"},{"type":"text","text":"started from sending an action."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StoreTask","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask","navigatorTitle":[{"kind":"identifier","text":"StoreTask"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"navigatorTitle":[{"text":"StorePublisher","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StorePublisher"}],"role":"symbol","title":"StorePublisher","kind":"symbol","url":"\/documentation\/composablearchitecture\/storepublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","abstract":[{"type":"text","text":"A publisher of store state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"kind":"symbol","title":"withState(_:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"url":"\/documentation\/composablearchitecture\/store\/withstate(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"kind":"symbol","type":"topic","title":"StoreOf","navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","url":"\/documentation\/composablearchitecture\/storeof","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StoreOf"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to a store of a given reducer’s domain."}]},"doc://ComposableArchitecture/11Observation10ObservableP":{"title":"Observation.Observable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/11Observation10ObservableP"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:transaction:)":{"kind":"symbol","title":"send(_:transaction:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"transaction"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI11TransactionV","text":"Transaction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"abstract":[{"type":"text","text":"Sends an action to the store with a given transaction."}],"url":"\/documentation\/composablearchitecture\/store\/send(_:transaction:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/s8CopyableP":{"title":"Swift.Copyable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"title":"Effect","role":"symbol","abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Identifiable-Implementations":{"kind":"article","type":"topic","title":"Identifiable Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations","url":"\/documentation\/composablearchitecture\/store\/identifiable-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Equatable-Implementations":{"kind":"article","title":"Equatable Implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/store\/equatable-implementations"},"https://github.com/pointfreeco/combine-schedulers/blob/main/Sources/CombineSchedulers/UIScheduler.swift":{"url":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","title":"UIScheduler","type":"link","titleInlineContent":[{"type":"text","text":"UIScheduler"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-1qxwl":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"text":".","type":"text"}]},"kind":"symbol","title":"state","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Direct access to state in the store when "},{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"text":".","type":"text"}],"url":"\/documentation\/composablearchitecture\/store\/state-1qxwl"},"doc://ComposableArchitecture/7Combine16ObservableObjectP":{"identifier":"doc:\/\/ComposableArchitecture\/7Combine16ObservableObjectP","title":"Combine.ObservableObject","type":"unresolvable"}}}