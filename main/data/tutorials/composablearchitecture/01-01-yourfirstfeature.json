{"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"]}],"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"metadata":{"category":"The Composable Architecture","title":"Your first feature","role":"project","categoryPathComponent":"MeetComposableArchitecture"},"sections":[{"chapter":"Essentials","title":"Your first feature","kind":"hero","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}]}]},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"The fundamental unit that features are built with in the Composable Architecture is the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol. A"},{"type":"text","text":" "},{"type":"text","text":"conformance to that protocol represents the logic and behavior for a feature in your"},{"type":"text","text":" "},{"type":"text","text":"application. This includes how to evolve the current state to the next state when an action is"},{"type":"text","text":" "},{"type":"text","text":"sent into the system, and how effects communicate with the outside world and feed data back"},{"text":" ","type":"text"},{"type":"text","text":"into the system."}],"type":"paragraph"},{"inlineContent":[{"text":"And most importantly, the feature’s core logic and behavior can be built in full isolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"type":"text","text":" "},{"text":"to reuse, and easier to test.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will"},{"text":" ","type":"text"},{"text":"add more interesting behavior to the feature, but let’s start simple for now.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"stepsSection":[{"code":"01-01-01-code-0001.swift","content":[{"inlineContent":[{"text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"caption":[{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"Before importing the library you will need to depend on it by "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"}]},{"caption":[{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro does a few things for you, but at"},{"type":"text","text":" "},{"text":"this point you only need to know that it extends your type to conform to the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" protocol.","type":"text"}]}],"name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new struct called "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":", and annotate it with the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro.","type":"text"}]}],"runtimePreview":null,"type":"step","media":null,"code":"01-01-01-code-0002.swift"},{"content":[{"inlineContent":[{"type":"text","text":"To conform to "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" you will start with a domain"},{"type":"text","text":" "},{"type":"text","text":"modeling exercise. You will create a "},{"code":"State","type":"codeVoice"},{"type":"text","text":" type that holds the state your feature needs"},{"type":"text","text":" "},{"type":"text","text":"to do its job, typically a struct. Then you will create an "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type that holds all"},{"type":"text","text":" "},{"type":"text","text":"the actions the user can perform in the feature, typically an enum."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"01-01-01-code-0003.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if your feature is to be observed by SwiftUI, which is usually the case, you must"},{"type":"text","text":" "},{"type":"text","text":"annotate its state with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"type":"text","text":" macro. It is the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture’s version of "},{"type":"codeVoice","code":"@Observable"},{"text":", but tuned to value types.","type":"text"}]}]},{"type":"step","code":"01-01-01-code-0004.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"For the purpose of a simple counter feature, the state consists of just a single integer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the current count, and the actions consist of tapping buttons to either increment or"},{"type":"text","text":" "},{"type":"text","text":"decrement the count."}]}],"caption":[{"content":[{"inlineContent":[{"text":"It is best to name the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" cases after literally what the user does in the UI,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"incrementButtonTapped","type":"codeVoice"},{"text":", rather than what logic you want to perform, such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Tip","type":"aside","style":"tip"}],"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":", you must implement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference"},{"type":"text","text":" property with a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true,"type":"reference"},{"type":"text","text":" reducer that evolves the state from its current value to"},{"text":" ","type":"text"},{"type":"text","text":"the next value given a user action, and returns any effects that the feature wants to"},{"type":"text","text":" "},{"type":"text","text":"execute in the outside world. This almost always begins by switching on the incoming action"},{"text":" ","type":"text"},{"type":"text","text":"to determine what logic you need to perform, and the "},{"type":"codeVoice","code":"state"},{"text":" is provided as ","type":"text"},{"code":"inout","type":"codeVoice"},{"type":"text","text":" so you"},{"type":"text","text":" "},{"type":"text","text":"can perform mutations on it directly."}]}],"media":null,"code":"01-01-01-code-0005.swift","runtimePreview":null,"caption":[{"style":"note","content":[{"inlineContent":[{"type":"text","text":"A reducer is implemented by providing a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true,"type":"reference"},{"type":"text","text":" property, and then listing the"},{"text":" ","type":"text"},{"type":"text","text":"reducers inside that you want to compose. Right now we only have one reducer we want to"},{"type":"text","text":" "},{"type":"text","text":"run, and so a simple "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","type":"reference"},{"type":"text","text":" is sufficient, but it is more"},{"text":" ","type":"text"},{"text":"typical to compose many reducers together, and that will be shown later in the tutorial.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note"}]},{"code":"01-01-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"text":"The logic for this feature is quite simple. We just want to either subtract one or add one","type":"text"},{"type":"text","text":" "},{"text":"to the state’s count. We must also return a value of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"","type":"text"},{"type":"text","text":" "},{"text":"that represents the effect to be executed in the outside world, but in this case we do not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need to execute anything. So we can return a special"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","isActive":true},{"type":"text","text":" value to represent we have no effects to"},{"type":"text","text":" "},{"text":"execute.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","caption":[]},{"inlineContent":[{"text":"That is all it takes to implement a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":" basic feature in the Composable Architecture."},{"text":" ","type":"text"},{"type":"text","text":"There is of course a lot more to know about, such as executing effects and feeding data"},{"type":"text","text":" "},{"text":"back into the system, using dependencies in reducers, composing multiple reducers together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}],"type":"paragraph"}],"anchor":"Create-a-reducer","title":"Create a reducer"},{"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"It is our personal preference to keep the reducer and view in the same file until it is"},{"text":" ","type":"text"},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"text":" ","type":"text"},{"text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and get a basic view into place."}],"type":"paragraph"}],"caption":[],"code":"01-01-02-code-0001.swift","type":"step","media":null,"runtimePreview":null},{"code":"01-01-02-code-0002.swift","caption":[{"content":[{"inlineContent":[{"text":"The store can be held onto as a ","type":"text"},{"code":"let","type":"codeVoice"},{"text":". Observation of the data in the store happens","type":"text"},{"text":" ","type":"text"},{"text":"automatically with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro."}],"type":"paragraph"}],"style":"tip","type":"aside","name":"Tip"}],"runtimePreview":null,"type":"step","media":null,"content":[{"inlineContent":[{"text":"The first thing one adds to the view is a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" that is generic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"over the reducer we constructed in the previous section. The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" represents the runtime"},{"text":" ","type":"text"},{"text":"of your feature. That is, it is the object that can process actions in order to update","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state, and it can execute effects and feed data from those effects back into the system."}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can implement some basic view hierarchy for displaying the count and providing"},{"type":"text","text":" "},{"text":"buttons for incrementing and decrementing.","type":"text"}]}],"code":"01-01-02-code-0003.swift","runtimePreview":"01-02-image-0003.png","caption":[],"media":null},{"inlineContent":[{"type":"text","text":"With some basic view scaffolding in place we can now start actually reading state from, and"},{"text":" ","type":"text"},{"type":"text","text":"sending actions to, the "},{"type":"codeVoice","code":"store"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"step","media":null,"code":"01-01-02-code-0004.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"We can read a property of state directly from the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" via dynamic member lookup,"},{"type":"text","text":" "},{"type":"text","text":"and we can send actions to the "},{"type":"codeVoice","code":"store"},{"text":" via ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"runtimePreview":"01-02-video-0005.mp4","type":"step","media":null,"caption":[{"inlineContent":[{"text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does","type":"text"},{"type":"text","text":" "},{"type":"text","text":"indeed change the visible count in the UI."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Next we want to actually run the feature. We will start with a preview. To do this we will","type":"text"},{"text":" ","type":"text"},{"text":"construct a ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and to do that we need to construct a "},{"type":"codeVoice","code":"StoreOf<CounterFeature>"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Stores can be constructed by providing the initial state you want the feature to begin in,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as a trailing closure that specifies the reducer that powers the feature."}]}],"code":"01-01-02-code-0005.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving onto the next section, let’s quickly show off a super power of the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,"},{"text":" ","type":"text"},{"text":"we can run the preview with a completely different reducer to alter how it executes.","type":"text"}]},{"caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Notice that the video demonstrates that tapping the buttons does not cause","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the count to increase or decrease. That is because we are using the empty reducer in the"},{"text":" ","type":"text"},{"text":"preview.","type":"text"}]}]}],"type":"step","content":[{"inlineContent":[{"text":"For example, in the preview, comment out the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer and the store will be"},{"type":"text","text":" "},{"type":"text","text":"given a reducer that performs no state mutations or effects. This allows us to preview the"},{"type":"text","text":" "},{"text":"design of the feature without worrying about any of its logic or behavior.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-01-02-code-0006.swift","runtimePreview":"01-02-video-0006.mp4"},{"content":[{"inlineContent":[{"type":"text","text":"Before moving on let’s be sure to bring back the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" reducer in the preview,"},{"text":" ","type":"text"},{"text":"otherwise it will continue to be inert with our next explorations.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"01-01-02-code-0007.swift","media":null,"runtimePreview":null},{"inlineContent":[{"type":"text","text":"That is all there is to implementing a basic feature in the Composable Architecture. The"},{"type":"text","text":" "},{"text":"feature is of course very simple, and doesn’t involve anything interesting like side effects","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(which will be the topic of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","isActive":true},{"text":"), but before any of that let’s see","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how to integrate this feature into an application."}],"type":"paragraph"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI view from that feature. This involves a new concept, the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":", which represents the runtime of the feature.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Integrating-with-SwiftUI","title":"Integrating with SwiftUI"},{"contentSection":[{"content":[{"inlineContent":[{"text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to run it in the preview. Next we need to figure out how to run the feature in the full"},{"text":" ","type":"text"},{"text":"application by altering its entry point. This will allow us to run the feature in a simulator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or on a device."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Integrating into the app","stepsSection":[{"caption":[],"content":[{"inlineContent":[{"text":"By default the entry point of your application is probably in a file called App.swift","type":"text"},{"text":" ","type":"text"},{"text":"and looks something like this code.","type":"text"}],"type":"paragraph"}],"code":"01-01-03-code-0001.swift","type":"step","runtimePreview":null,"media":null},{"runtimePreview":null,"caption":[],"media":null,"code":"01-01-03-code-0002.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"We will change the entry point of the application so that it constructs a ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":" "},{"type":"text","text":"and provides a store, just as we did in the preview."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It is important to note that the "},{"code":"Store","type":"codeVoice"},{"text":" that powers the application should only be created","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"type":"text","text":" "},{"code":"WindowGroup","type":"codeVoice"},{"type":"text","text":" at the root of the scene. But, it can also be held as a static variable"},{"text":" ","type":"text"},{"text":"and then provided in the scene.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"01-01-03-code-0003.swift","type":"step","media":null,"runtimePreview":null},{"inlineContent":[{"text":"We can demonstrate another super power of the Composable Architecture. Reducers have a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method called "},{"type":"codeVoice","code":"_printChanges"},{"type":"text","text":" that is similar to a tool that SwiftUI provides. When used it"},{"text":" ","type":"text"},{"type":"text","text":"will print every action that the reducer processes to the console, and it will print how the"},{"type":"text","text":" "},{"type":"text","text":"state changed after processing the  action. The method will also go through great lengths to"},{"type":"text","text":" "},{"type":"text","text":"collapse the state difference to a compact form. This includes not displaying nested state if"},{"type":"text","text":" "},{"text":"it hasn’t changed, and not showing elements in collections that haven’t changed.","type":"text"}],"type":"paragraph"},{"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"01-01-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"type":"text","text":" "},{"code":"_printChanges(_:)","type":"codeVoice"},{"text":" on the reducer.","type":"text"}]}]},{"code":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few"},{"text":" ","type":"text"},{"type":"text","text":"times you should see logs printed to the console showing you exactly what is happening."}]}],"media":"01-03-image-0005.jpg","type":"step"}],"anchor":"Integrating-into-the-app"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"Adding side effects","kind":"callToAction","action":{"isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"}}],"kind":"project","references":{"01-01-02-code-0004.swift":{"identifier":"01-01-02-code-0004.swift","highlights":[{"line":6},{"line":13},{"line":21}],"fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"]},"01-01-02-code-0007.swift":{"fileType":"swift","type":"file","fileName":"CounterFeature.swift","identifier":"01-01-02-code-0007.swift","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"syntax":"swift","highlights":[{"line":4}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","estimatedTime":"20min","kind":"project","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","title":"Your first feature","role":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","title":"Integrating into the app","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","title":"body","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Body","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"type":"topic","defaultImplementations":2,"required":true,"url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t"},"01-01-02-code-0006.swift":{"identifier":"01-01-02-code-0006.swift","highlights":[{"line":4}],"fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      \/\/ CounterFeature()","    }","  )","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","title":"Multiple presentation destinations","role":"project","kind":"project","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"type":"topic","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","title":"Navigation stacks","role":"project","kind":"project","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"topic","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","title":"Controlling dependencies","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","title":"What is a side effect?","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"01-01-02-code-0003.swift":{"identifier":"01-01-02-code-0003.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","title":"Testing network requests","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"01-01-02-code-0001.swift":{"identifier":"01-01-02-code-0001.swift","fileName":"CounterFeature.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"highlights":[]},"01-01-03-code-0003.swift":{"identifier":"01-01-03-code-0003.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}],"fileName":"App.swift","fileType":"swift","syntax":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"section","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","role":"pseudoSymbol","type":"section"},"01-01-03-code-0004.swift":{"fileType":"swift","type":"file","fileName":"App.swift","identifier":"01-01-03-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"syntax":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"title":"Effect","role":"symbol","abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect"},"01-02-image-0003.png":{"identifier":"01-02-image-0003.png","alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","variants":[{"url":"\/images\/ComposableArchitecture\/01-02-image-0003.png","traits":["1x","light"]}],"type":"image"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"01-02-video-0006.mp4":{"identifier":"01-02-video-0006.mp4","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/01-02-video-0006.mp4"}],"poster":null,"type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","title":"Composing reducers","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","title":"Navigation","role":"article","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","title":"Integrate reducers","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"text":"return an effect, but you don’t need to do anything.","type":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"topic","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"none","kind":"identifier"},{"kind":"text","text":": "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol"},"01-01-02-code-0002.swift":{"identifier":"01-01-02-code-0002.swift","highlights":[{"line":2},{"line":3}],"fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    EmptyView()","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"01-01-01-code-0002.swift":{"fileType":"swift","type":"file","fileName":"CounterFeature.swift","identifier":"01-01-01-code-0002.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  ","}"],"syntax":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","estimatedTime":"30min","kind":"project","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","title":"Adding side effects","role":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","role":"pseudoSymbol","type":"section"},"01-01-01-code-0006.swift":{"identifier":"01-01-01-code-0006.swift","fileName":"CounterFeature.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"highlights":[{"line":19},{"line":20},{"line":23},{"line":24}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","title":"Testing state changes","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","title":"Deleting a contact","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","title":"Delete contacts","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"01-01-01-code-0001.swift":{"fileType":"swift","type":"file","fileName":"CounterFeature.swift","identifier":"01-01-01-code-0001.swift","content":["import ComposableArchitecture"],"syntax":"swift","highlights":[]},"01-01-01-code-0005.swift":{"identifier":"01-01-01-code-0005.swift","fileName":"CounterFeature.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        ","      case .incrementButtonTapped:","        ","      }","    }","  }","}"],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","title":"Create a reducer","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"01-01-02-code-0005.swift":{"fileType":"swift","type":"file","fileName":"CounterFeature.swift","identifier":"01-01-02-code-0005.swift","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"syntax":"swift","highlights":[]},"01-02-video-0005.mp4":{"identifier":"01-02-video-0005.mp4","alt":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0005.mp4","traits":["1x","light"]}],"poster":null,"type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","title":"Project set up","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"section","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","title":"Adding a tab view","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","title":"Integrating with SwiftUI","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","title":"Testing presentation","role":"project","kind":"project","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"topic","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","title":"Integrate views","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min","kind":"project","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","title":"Composing features","role":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","role":"project","kind":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","title":"Testing your feature","role":"project","kind":"project","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"topic","estimatedTime":"1hr 0min","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","title":"Performing a network request","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"kind":"symbol","type":"topic","title":"send(_:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","url":"\/documentation\/composablearchitecture\/store\/send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"text":"StoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"kind":"symbol"},"01-03-image-0005.jpg":{"identifier":"01-03-image-0005.jpg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/01-03-image-0005.jpg"}],"type":"image"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"url":"\/tutorials\/meetcomposablearchitecture","title":"Meet the Composable Architecture","role":"overview","type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture#Installation":{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"link","title":"adding it to your Xcode project settings or SPM package","titleInlineContent":[{"type":"text","text":"adding it to your"},{"type":"text","text":" "},{"type":"text","text":"Xcode project settings or SPM package"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation"},"01-01-03-code-0002.swift":{"identifier":"01-01-03-code-0002.swift","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"App.swift","fileType":"swift","syntax":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/essentials","title":"Essentials","role":"article","type":"topic"},"01-01-01-code-0004.swift":{"fileType":"swift","type":"file","fileName":"CounterFeature.swift","identifier":"01-01-01-code-0004.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"syntax":"swift","highlights":[{"line":7},{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","title":"Child-to-parent communication","role":"pseudoSymbol","type":"section"},"01-01-03-code-0001.swift":{"identifier":"01-01-03-code-0001.swift","fileName":"App.swift","fileType":"swift","type":"file","syntax":"swift","content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"title":"ObservableState()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ObservableState","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"text":" function.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reduce","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reduce"}],"navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"title":"Reduce","role":"symbol","type":"topic"},"01-01-01-code-0003.swift":{"identifier":"01-01-01-code-0003.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12}],"fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    ","  }","  ","  enum Action {","    ","  }","}"]}}}