{"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"],"type":"conformsTo"}],"seeAlsoSections":[{"anchor":"Supporting-reducers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"],"title":"Supporting reducers","generated":true}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CombineReducers","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Reducers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Reducers"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","text":"ReducerProtocol","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"code":"CombineReducers","type":"codeVoice"},{"text":" takes a block that can combine a number of reducers using a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Useful for grouping reducers together and applying reducer modifiers to the result.","type":"text"}]},{"code":["var body: some ReducerProtocol<State, Action> {","  CombineReducers {","    ReducerA()","    ReducerB()","    ReducerC()","  }","  .ifLet(\\.child, action: \/Action.child)","}"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"symbolKind":"struct","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Structure","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombineReducers"}],"externalID":"s:22ComposableArchitecture15CombineReducersV","title":"CombineReducers","navigatorTitle":[{"text":"CombineReducers","kind":"identifier"}]},"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/combinereducers"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/init(_:)"],"generated":true,"title":"Initializers"},{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/reduce(into:action:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/ReducerProtocol-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations","generated":true}],"abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"url":"\/documentation\/composablearchitecture\/combinereducers","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CombineReducers","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","kind":"symbol","title":"CombineReducers","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/ReducerProtocol-Implementations":{"type":"topic","kind":"article","abstract":[],"url":"\/documentation\/composablearchitecture\/combinereducers\/reducerprotocol-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/ReducerProtocol-Implementations","title":"ReducerProtocol Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmptyReducer"}],"type":"topic","title":"EmptyReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyReducer"}],"url":"\/documentation\/composablearchitecture\/emptyreducer","abstract":[{"type":"text","text":"A reducer that does nothing."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/reduce(into:action:)":{"url":"\/documentation\/composablearchitecture\/combinereducers\/reduce(into:action:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Reducers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Reducers"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":") -> ","kind":"text"},{"text":"EffectTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10EffectTaska"},{"text":"<","kind":"text"},{"text":"Reducers","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"type":"topic","title":"reduce(into:action:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/reduce(into:action:)","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"type":"topic","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Reduce","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reduce","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" function."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/init(_:)":{"url":"\/documentation\/composablearchitecture\/combinereducers\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"text":"Reducers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Initializes a reducer that combines all of the reducers in the given build block."}],"title":"init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/init(_:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and returning their merged effects.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","type":"topic","role":"symbol","title":"ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerBuilder"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReducerBuilder"}]}}}