{"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"keyPath","content":[{"type":"paragraph","inlineContent":[{"text":"A key path that indicates the property of the ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"type":"text","text":" structure to"},{"type":"text","text":" "},{"type":"text","text":"update."}]}]},{"name":"value","content":[{"inlineContent":[{"text":"The new value to set for the item specified by ","type":"text"},{"type":"codeVoice","code":"keyPath"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"A reducer that has the given value set in its dependencies.","type":"text"}]}]},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This overrides the dependency specified by "},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":" for the execution of the receiving"},{"text":" ","type":"text"},{"text":"reducer ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"type":"text","text":" all of its effects. It can be useful for altering the dependencies for just"},{"type":"text","text":" "},{"type":"text","text":"one portion of your application, while letting the rest of the application continue using the"},{"text":" ","type":"text"},{"type":"text","text":"default live dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you are creating an onboarding experience to teach people how to use one"},{"type":"text","text":" "},{"type":"text","text":"of your features. This can be done by constructing a new reducer that embeds the core"},{"type":"text","text":" "},{"text":"feature’s domain and layers on additional logic:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Onboarding: ReducerProtocol {","  struct State {","    var feature: Feature.State","    \/\/ Additional onboarding state","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ Additional onboarding actions","  }","","  var body: some ReducerProtocol<State, Action> {","    Scope(state: \\.feature, action: \/Action.feature) {","      Feature()","    }","","    Reduce { state, action in","      \/\/ Additional onboarding logic","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"This can work just fine, but the "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer will have access to all of the live"},{"text":" ","type":"text"},{"type":"text","text":"dependencies by default, and that might not be ideal. For example, the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer"},{"text":" ","type":"text"},{"text":"may need to make API requests and read\/write from user defaults. It may be preferable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to run the "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer in an alternative environment for onboarding purposes, such"},{"type":"text","text":" "},{"type":"text","text":"as an API client that returns some mock data or an in-memory user defaults so that the"},{"type":"text","text":" "},{"type":"text","text":"onboarding experience doesn’t accidentally trample on shared data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This can be by using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","type":"reference","isActive":true},{"type":"text","text":" method to override those dependencies"},{"type":"text","text":" "},{"text":"just for the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer and its effects:"}]},{"syntax":"swift","type":"codeListing","code":["var body: some ReducerProtocol<State, Action> {","  Scope(state: \\.feature, action: \/Action.feature) {","    Feature()","      .dependency(\\.apiClient, .mock)","      .dependency(\\.userDefaults, .mock)","  }","","  Reduce { state, action in","    \/\/ Additional onboarding logic","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/transformDependency(_:transform:)","type":"reference"},{"type":"text","text":" for a similar method that can inspect and modify the"},{"type":"text","text":" "},{"text":"current dependency when overriding.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/ReducerProtocol-Implementations"]]},"abstract":[{"type":"text","text":"Sets the dependency value of the specified key path to the given value."}],"metadata":{"title":"dependency(_:_:)","externalID":"s:22ComposableArchitecture15ReducerProtocolPAAE10dependencyyAA021_DependencyKeyWritingC0VyxGs08WritableG4PathCy12Dependencies0F6ValuesVqd__G_qd__tlF::SYNTHESIZED::s:22ComposableArchitecture15CombineReducersV","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"modules":[{"name":"ComposableArchitecture"}],"extendedModule":"ComposableArchitecture","role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"variants":[{"paths":["\/documentation\/composablearchitecture\/combinereducers\/dependency(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/ReducerProtocol-Implementations":{"type":"topic","kind":"article","abstract":[],"url":"\/documentation\/composablearchitecture\/combinereducers\/reducerprotocol-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/ReducerProtocol-Implementations","title":"ReducerProtocol Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"url":"\/documentation\/composablearchitecture\/combinereducers","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CombineReducers","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","kind":"symbol","title":"CombineReducers","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/transformDependency(_:transform:)":{"title":"transformDependency(_:transform:)","abstract":[{"type":"text","text":"Transform a reducer’s dependency value at the specified key path with the given function."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/combinereducers\/transformdependency(_:transform:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"transformDependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"V"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"transform"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/transformDependency(_:transform:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/dependency(_:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","url":"\/documentation\/composablearchitecture\/combinereducers\/dependency(_:_:)","abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"type":"topic","title":"dependency(_:_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"}}}