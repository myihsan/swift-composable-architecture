{"abstract":[{"type":"text","text":"A generic wrapper for turning any non-"},{"code":"Sendable","type":"codeVoice"},{"text":" type into a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" one, in an unchecked"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"sections":[],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo"}],"topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/init(wrappedValue:)"]},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/value","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/wrappedValue"],"anchor":"Instance-Properties"},{"generated":true,"title":"Subscripts","anchor":"Subscripts","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/subscript(dynamicMember:)-2jwyu","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/subscript(dynamicMember:)-48ifs"]},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Equatable-Implementations"],"anchor":"Default-Implementations","generated":true}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uncheckedsendable"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable","interfaceLanguage":"swift"},"metadata":{"role":"symbol","symbolKind":"struct","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Structure","title":"UncheckedSendable","externalID":"s:22ComposableArchitecture17UncheckedSendableV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UncheckedSendable"}],"navigatorTitle":[{"kind":"identifier","text":"UncheckedSendable"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@dynamicMemberLookup","kind":"attribute"},{"kind":"text","text":" "},{"text":"@propertyWrapper","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UncheckedSendable","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Sometimes we need to use types that should be sendable but have not yet been audited for"},{"type":"text","text":" "},{"type":"text","text":"sendability. If we feel confident that the type is truly sendable, and we donâ€™t want to blanket"},{"text":" ","type":"text"},{"text":"disable concurrency warnings for a module via ","type":"text"},{"type":"codeVoice","code":"@preconcurrency import"},{"text":", then we can selectively","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"make that single type sendable by wrapping it in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"By wrapping something in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable"},{"type":"text","text":" you are asking the compiler to trust"},{"type":"text","text":" "},{"type":"text","text":"you that the type is safe to use from multiple threads, and the compiler cannot help you find"},{"text":" ","type":"text"},{"type":"text","text":"potential race conditions in your code."}]}],"style":"note"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/subscript(dynamicMember:)-48ifs":{"abstract":[],"url":"\/documentation\/composablearchitecture\/uncheckedsendable\/subscript(dynamicmember:)-48ifs","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/subscript(dynamicMember:)-48ifs","fragments":[{"kind":"keyword","text":"subscript"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Subject"},{"text":">(","kind":"text"},{"text":"dynamicMember","kind":"externalParam"},{"text":" _: ","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"Subject","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Subject"}],"kind":"symbol","title":"subscript(dynamicMember:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/init(_:)":{"kind":"symbol","type":"topic","title":"init(_:)","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/init(_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable","title":"Swift.Copyable"},"doc://ComposableArchitecture/SH":{"identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/Equatable-Implementations":{"kind":"article","type":"topic","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/equatable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/value":{"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/value","title":"value","abstract":[{"type":"text","text":"The unchecked value."}],"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/value"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable":{"kind":"symbol","title":"UncheckedSendable","abstract":[{"text":"A generic wrapper for turning any non-","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" type into a "},{"type":"codeVoice","code":"Sendable"},{"text":" one, in an unchecked","type":"text"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"type":"topic","url":"\/documentation\/composablearchitecture\/uncheckedsendable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UncheckedSendable","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UncheckedSendable"}]},"doc://ComposableArchitecture/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/ComposableArchitecture\/SE"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/Encodable-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/encodable-implementations","title":"Encodable Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Encodable-Implementations"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/wrappedValue":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/wrappedValue","role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/wrappedvalue","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"title":"wrappedValue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/ComposableArchitecture\/Se"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/init(wrappedValue:)":{"abstract":[],"url":"\/documentation\/composablearchitecture\/uncheckedsendable\/init(wrappedvalue:)","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/init(wrappedValue:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"kind":"symbol","title":"init(wrappedValue:)"},"doc://ComposableArchitecture/SQ":{"identifier":"doc:\/\/ComposableArchitecture\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/subscript(dynamicMember:)-2jwyu":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/subscript(dynamicMember:)-2jwyu","role":"symbol","title":"subscript(dynamicMember:)","abstract":[],"fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"text":"Subject","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"dynamicMember","kind":"externalParam"},{"kind":"text","text":" _: "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Subject"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Subject"}],"url":"\/documentation\/composablearchitecture\/uncheckedsendable\/subscript(dynamicmember:)-2jwyu","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/Decodable-Implementations":{"title":"Decodable Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uncheckedsendable\/decodable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/Decodable-Implementations","abstract":[],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UncheckedSendable/projectedValue":{"abstract":[],"url":"\/documentation\/composablearchitecture\/uncheckedsendable\/projectedvalue","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UncheckedSendable\/projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"projectedValue","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture17UncheckedSendableV","kind":"typeIdentifier","text":"UncheckedSendable"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">","kind":"text"}],"kind":"symbol","title":"projectedValue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"title":"EffectPublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effectpublisher","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectPublisher"}]}}}