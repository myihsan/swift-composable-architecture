{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer"]]},"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","isActive":true},{"type":"text","text":". Read"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/optional(file:fileID:line:)","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"optional"},{"text":"(","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":" = "},{"text":"#file","kind":"keyword"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":" = ","kind":"text"},{"kind":"keyword","text":"#fileID"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":" = "},{"text":"#line","kind":"keyword"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer","kind":"typeIdentifier","text":"AnyReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Environment","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A reducer that works on optional state."}],"type":"paragraph"}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Transforms a reducer that works on non-optional state into one that works on optional state by"},{"type":"text","text":" "},{"text":"only running the non-optional reducer when state is non-nil.","type":"text"}]},{"inlineContent":[{"text":"Often used in tandem with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)","type":"reference"},{"text":" to transform a reducer on a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"non-optional child domain into a reducer that can be combined with a reducer on a parent"},{"type":"text","text":" "},{"type":"text","text":"domain that contains some optional child domain:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Parent domain that holds an optional child domain:","struct AppState { var modal: ModalState? }","enum AppAction { case modal(ModalAction) }","struct AppEnvironment { var mainQueue: AnySchedulerOf<DispatchQueue> }","","\/\/ A reducer that works on the non-optional child domain:","let modalReducer = Reducer<ModalState, ModalAction, ModalEnvironment { ... }","","\/\/ Pullback the modal reducer so that it works on all of the app domain:","let appReducer = Reducer<AppState, AppAction, AppEnvironment>.combine(","  modalReducer.optional().pullback(","    state: \\.modal,","    action: \/AppAction.modal,","    environment: { ModalEnvironment(mainQueue: $0.mainQueue) }","  ),","  Reducer { state, action, environment in","    ...","  }",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Take care when combining optional reducers into parent domains. An optional reducer cannot","type":"text"},{"type":"text","text":" "},{"type":"text","text":"process actions in its domain when its state is "},{"code":"nil","type":"codeVoice"},{"text":". If a child action is sent to an","type":"text"},{"type":"text","text":" "},{"text":"optional reducer when child state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", it is generally considered a logic error. There"},{"type":"text","text":" "},{"type":"text","text":"are a few ways in which these errors can sneak into a code base:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parent reducer sets child state to "},{"code":"nil","type":"codeVoice"},{"text":" when processing a child action and runs","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"text":" the child reducer:","type":"text"}]},{"code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ When combining reducers, the parent reducer runs first","  Reducer { state, action, environment in","    switch action {","    case .child(.didDisappear):","      \/\/ And `nil`s out child state when processing a child action","      state.child = nil","      return .none","    ...","    }","  },","  \/\/ Before the child reducer runs","  childReducer.optional().pullback(...)",")","","let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  case .didDisappear:","    \/\/ This action is never received here because child state is `nil` in the parent","  ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To ensure that a child reducer can process any action that a parent may use to "},{"code":"nil","type":"codeVoice"},{"text":" out","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its state, combine it "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" the parent:"}],"type":"paragraph"},{"syntax":"swift","code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ The child runs first","  childReducer.optional().pullback(...),","  \/\/ The parent runs after","  Reducer { state, action, environment in","    ...","  }",")"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A child effect feeds a child action back into the store when child state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  switch action {","  case .onAppear:","    \/\/ An effect may want to feed its result back to the child domain in an action","    return environment.apiClient","      .request()","      .map(ChildAction.response)","","  case let .response(response):","    \/\/ But the child cannot process this action if its state is `nil` in the parent","  ...","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is perfectly reasonable to ignore the result of an effect when child state is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"for example one-off effects that you donâ€™t want to cancel. However, many long-living"},{"type":"text","text":" "},{"type":"text","text":"effects "},{"type":"emphasis","inlineContent":[{"text":"should","type":"text"}]},{"text":" be explicitly canceled when tearing down a child domain:","type":"text"}]},{"code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  enum MotionID {}","","  switch action {","  case .onAppear:","    \/\/ Mark long-living effects that shouldn't outlive their domain cancellable","    return environment.motionClient","      .start()","      .map(ChildAction.motion)","      .cancellable(id: MotionID.self)","","  case .onDisappear:","    \/\/ And explicitly cancel them when the domain is torn down","    return .cancel(id: MotionID.self)","  ...","  }","}"],"syntax":"swift","type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"A view store sends a child action when child state is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["WithViewStore(self.parentStore) { parentViewStore in","  \/\/ If child state is `nil`, it cannot process this action.","  Button(\"Child Action\") { parentViewStore.send(.child(.action)) }","  ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"reference","isActive":true},{"text":" with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},{"type":"text","text":" to"},{"type":"text","text":" "},{"text":"ensure that views can only send child actions when the child domain is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["IfLetStore(","  self.parentStore.scope(state: { $0.child }, action: { .child($0) }",") { childStore in","  \/\/ This destination only appears when child state is non-`nil`","  WithViewStore(childStore) { childViewStore in","    \/\/ So this action can only be sent when child state is non-`nil`","    Button(\"Child Action\") { childViewStore.send(.action) }","  }","  ...","}"]}]}]},{"items":[{"content":[{"inlineContent":[{"text":"See also: ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":", a SwiftUI helper for transforming a store on optional state into a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"store on non-optional state."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"See also: "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","isActive":true,"type":"reference"},{"type":"text","text":", a UIKit helper for doing imperative work with a store"},{"text":" ","type":"text"},{"text":"on optional state.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyreducer\/optional(file:fileid:line:)"]}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"\n      This API has been soft-deprecated in favor of 'ReducerProtocol.ifLet'. Read the migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/reducerprotocol\n      "}],"type":"paragraph"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"platforms":[],"role":"symbol","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"method","title":"optional(file:fileID:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"optional","kind":"identifier"},{"text":"(","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV","text":"AnyReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"externalID":"s:22ComposableArchitecture10AnyReducerV8optional4file0F2ID4lineACyxSgq_q0_Gs12StaticStringV_AKSutF","roleHeading":"Instance Method"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","title":"ifLet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a storeâ€™s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/pullback(state:action:environment:)":{"abstract":[{"text":"This API has been soft-deprecated in favor of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true},{"type":"text","text":". Read"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"text":" for more information.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)","deprecated":true,"type":"topic","role":"symbol","title":"pullback(state:action:environment:)","url":"\/documentation\/composablearchitecture\/anyreducer\/pullback(state:action:environment:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pullback"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ParentState"},{"text":", ","kind":"text"},{"text":"ParentAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ParentEnvironment"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": ("},{"text":"ParentEnvironment","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":") -> "},{"text":"AnyReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentAction"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/optional(file:fileID:line:)":{"url":"\/documentation\/composablearchitecture\/anyreducer\/optional(file:fileid:line:)","type":"topic","title":"optional(file:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"optional","kind":"identifier"},{"kind":"text","text":"("},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","isActive":true},{"type":"text","text":". Read"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"reference","isActive":true},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/optional(file:fileID:line:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer":{"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Read ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"reference","isActive":true},{"text":" for more information.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer","deprecated":true,"type":"topic","role":"symbol","title":"AnyReducer","url":"\/documentation\/composablearchitecture\/anyreducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyReducer"}],"kind":"symbol","navigatorTitle":[{"text":"AnyReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","role":"symbol","title":"Scope","url":"\/documentation\/composablearchitecture\/scope","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"kind":"symbol","navigatorTitle":[{"text":"Scope","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","type":"reference","isActive":true},{"type":"text","text":", in both Swift 5.7 and"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"topic","role":"article","title":"Migrating to the reducer protocol","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)","kind":"symbol","title":"scope(state:action:)","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerDeprecations":{"abstract":[{"type":"text","text":"Review unsupported reducer APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/reducerdeprecations","title":"Deprecations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifLet(_:action:then:file:fileID:line:)":{"url":"\/documentation\/composablearchitecture\/reducerprotocol\/iflet(_:action:then:file:fileid:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"kind":"text","text":", "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":">, ","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"text":"_IfLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","kind":"symbol","title":"ifLet(_:action:then:file:fileID:line:)","role":"symbol"}}}