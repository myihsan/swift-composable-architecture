{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"pullback(state:action:environment:file:fileID:line:)","externalID":"s:22ComposableArchitecture10AnyReducerV8pullback5state6action11environment4file0I2ID4lineACyqd__qd_0_qd_1_G9CasePaths0L4PathVyqd__xG_ANyqd_0_q_Gq0_qd_1_cs12StaticStringVARSutr1_lF","role":"symbol","symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"platforms":[],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pullback"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ParentState"},{"kind":"text","text":", "},{"text":"ParentAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ParentEnvironment","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"text":"ParentState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"text":"<","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"text":"environment","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":") -> "},{"text":"Environment","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"AnyReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentState"},{"text":", ","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer"]]},"kind":"symbol","abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:_:file:fileID:line:)","isActive":true,"type":"reference"},{"type":"text","text":". Read "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","isActive":true},{"text":" ","type":"text"},{"text":"for more information.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyreducer\/pullback(state:action:environment:file:fileid:line:)"]}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"\n      This API has been soft-deprecated in favor of 'ReducerProtocol.ifCaseLet' and 'Scope'. Read the migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/reducerprotocol\n      "}],"type":"paragraph"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:file:fileID:line:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pullback","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ParentState"},{"text":", ","kind":"text"},{"text":"ParentAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ParentEnvironment","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"toChildState"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"text":"ParentState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"State","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":" "},{"text":"toChildAction","kind":"internalParam"},{"kind":"text","text":": "},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentAction"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"environment","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"toChildEnvironment"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ParentEnvironment","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Environment","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#file"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"text":"#fileID","kind":"keyword"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"text":"#line","kind":"keyword"},{"text":") -> ","kind":"text"},{"text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A case path that can extract\/embed "},{"code":"State","type":"codeVoice"},{"type":"text","text":" from "},{"type":"codeVoice","code":"ParentState"},{"type":"text","text":"."}]}],"name":"toChildState"},{"name":"toChildAction","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A case path that can extract\/embed "},{"code":"Action","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"ParentAction","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A function that transforms "},{"code":"ParentEnvironment","type":"codeVoice"},{"type":"text","text":" into "},{"type":"codeVoice","code":"Environment"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"toChildEnvironment"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"text":"A reducer that works on ","type":"text"},{"type":"codeVoice","code":"ParentState"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ParentAction"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ParentEnvironment"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"Transforms a reducer that works on child state, action, and environment into one that works on","type":"text"},{"text":" ","type":"text"},{"text":"parent state, action and environment.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It accomplishes this by providing 3 transformations to the method:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"A case path that can extract\/embed a piece of child state from the parent state, which is","type":"text"},{"type":"text","text":" "},{"text":"typically an enum.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A case path that can extract\/embed a child action into a parent action.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A function that can transform the parent environment into a child environment."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This overload of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)","type":"reference","isActive":true},{"text":" differs from the other in that it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"takes a "},{"type":"codeVoice","code":"CasePath"},{"text":" transformation for the state instead of a ","type":"text"},{"type":"codeVoice","code":"WritableKeyPath"},{"type":"text","text":". This makes it"},{"type":"text","text":" "},{"text":"perfect for working on enum state as opposed to struct state. In particular, you can use this","type":"text"},{"type":"text","text":" "},{"text":"operator to pullback a reducer that operates on a single case of some state enum to work on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the entire state enum."}]},{"type":"paragraph","inlineContent":[{"text":"When used with the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/combine(_:)-94fzl","type":"reference"},{"type":"text","text":" operator you can define many reducers that work each"},{"type":"text","text":" "},{"text":"case of the state enum, and then ","type":"text"},{"inlineContent":[{"type":"text","text":"pull them back"}],"type":"emphasis"},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"combine"}]},{"type":"text","text":" them into one big reducer that"},{"type":"text","text":" "},{"type":"text","text":"works on a large domain."}]},{"type":"codeListing","code":["\/\/ Parent domain that holds a child domain:","enum AppState { case loggedIn(LoggedInState), \/* rest of state *\/ }","enum AppAction { case loggedIn(LoggedInAction), \/* other actions *\/ }","struct AppEnvironment { var loggedIn: LoggedInEnvironment, \/* rest of dependencies *\/ }","","\/\/ A reducer that works on the child domain:","let loggedInReducer = AnyReducer<LoggedInState, LoggedInAction, LoggedInEnvironment> { ... }","","\/\/ Pullback the logged-in reducer so that it works on all of the app domain:","let appReducer: AnyReducer<AppState, AppAction, AppEnvironment> = .combine(","  loggedInReducer.pullback(","    state: \/AppState.loggedIn,","    action: \/AppAction.loggedIn,","    environment: { $0.loggedIn }","  ),","","  \/* other reducers *\/",")"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Take care when combining a child reducer for a particular case of enum state into its parent"},{"type":"text","text":" "},{"type":"text","text":"domain. A child reducer cannot process actions in its domain if it fails to extract its"},{"text":" ","type":"text"},{"type":"text","text":"corresponding state. If a child action is sent to a reducer when its state is unavailable, it"},{"type":"text","text":" "},{"text":"is generally considered a logic error, and a runtime warning will be logged. There are a few","type":"text"},{"type":"text","text":" "},{"text":"ways in which these errors can sneak into a code base:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parent reducer sets child state to a different case when processing a child action and"},{"type":"text","text":" "},{"text":"runs ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" the child reducer:"}]},{"syntax":"swift","type":"codeListing","code":["let parentReducer = AnyReducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ When combining reducers, the parent reducer runs first","  AnyReducer { state, action, environment in","    switch action {","    case .child(.didDisappear):","      \/\/ And `nil`s out child state when processing a child action","      state.child = .anotherChild(AnotherChildState())","      return .none","    ...","    }","  },","  \/\/ Before the child reducer runs","  childReducer.pullback(state: \/ParentState.child, ...)",")","","let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  case .didDisappear:","    \/\/ This action is never received here because child state cannot be extracted","  ...","}"]},{"inlineContent":[{"type":"text","text":"To ensure that a child reducer can process any action that a parent may use to change its"},{"text":" ","type":"text"},{"text":"state, combine it ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"text":" the parent:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ The child runs first","  childReducer.pullback(state: \/ParentState.child, ...),","  \/\/ The parent runs after","  Reducer { state, action, environment in","    ...","  }",")"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A child effect feeds a child action back into the store when child state is unavailable:"}]},{"type":"codeListing","syntax":"swift","code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  switch action {","  case .onAppear:","    \/\/ An effect may want to later feed a result back to the child domain in an action","    return environment.apiClient","      .request()","      .map(ChildAction.response)","","  case let .response(response):","    \/\/ But the child cannot process this action if its state is unavailable","  ...","  }","}"]},{"inlineContent":[{"text":"It is perfectly reasonable to ignore the result of an effect when child state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for example one-off effects that you don’t want to cancel. However, many long-living"},{"text":" ","type":"text"},{"text":"effects ","type":"text"},{"inlineContent":[{"type":"text","text":"should"}],"type":"emphasis"},{"type":"text","text":" be explicitly canceled when tearing down a child domain:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  enum MotionID {}","","  switch action {","  case .onAppear:","    \/\/ Mark long-living effects that shouldn't outlive their domain cancellable","    return environment.motionClient","      .start()","      .map(ChildAction.motion)","      .cancellable(id: MotionID.self)","","  case .onDisappear:","    \/\/ And explicitly cancel them when the domain is torn down","    return .cancel(id: MotionID.self)","  ...","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A view store sends a child action when child state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["WithViewStore(self.parentStore) { parentViewStore in","  \/\/ If child state is `nil`, it cannot process this action.","  Button(\"Child Action\") { parentViewStore.send(.child(.action)) }","  ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)"},{"text":" with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true,"type":"reference"},{"type":"text","text":" to ensure that views can only send"},{"type":"text","text":" "},{"text":"child actions when the child domain is available.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["SwitchStore(self.parentStore) {","  CaseLet(state: \/ParentState.child, action: ParentAction.child) { childStore in","    \/\/ This destination only appears when child state matches","    WithViewStore(childStore) { childViewStore in","      \/\/ So this action can only be sent when child state is available","      Button(\"Child Action\") { childViewStore.send(.action) }","    }","  }","  ...","}"]}]}],"type":"unorderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See also: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"text":", a SwiftUI helper for transforming a store on enum state into","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"stores on each case of the enum."}]}]}],"type":"unorderedList"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/pullback(state:action:environment:)":{"abstract":[{"text":"This API has been soft-deprecated in favor of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true},{"type":"text","text":". Read"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"text":" for more information.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)","deprecated":true,"type":"topic","role":"symbol","title":"pullback(state:action:environment:)","url":"\/documentation\/composablearchitecture\/anyreducer\/pullback(state:action:environment:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pullback"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ParentState"},{"text":", ","kind":"text"},{"text":"ParentAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ParentEnvironment"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": ("},{"text":"ParentEnvironment","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":") -> "},{"text":"AnyReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentAction"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/init(state:action:_:file:fileID:line:)":{"abstract":[{"text":"Initializes a reducer that runs the given child reducer against a slice of parent state and","type":"text"},{"type":"text","text":" "},{"text":"actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:_:file:fileID:line:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/scope\/init(state:action:_:file:fileid:line:)","title":"init(state:action:_:file:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Child"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"text":"<","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Child"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","text":"Action"},{"kind":"text","text":">, () -> "},{"text":"Child","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/pullback(state:action:environment:file:fileID:line:)":{"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","isActive":true},{"type":"text","text":" and"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:_:file:fileID:line:)","type":"reference","isActive":true},{"type":"text","text":". Read "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"reference"},{"text":" ","type":"text"},{"text":"for more information.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:file:fileID:line:)","deprecated":true,"type":"topic","role":"symbol","title":"pullback(state:action:environment:file:fileID:line:)","url":"\/documentation\/composablearchitecture\/anyreducer\/pullback(state:action:environment:file:fileid:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"pullback","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ParentState"},{"text":", ","kind":"text"},{"text":"ParentAction","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ParentEnvironment"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"text":"ParentState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ParentAction"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": ("},{"text":"ParentEnvironment","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Environment","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV","text":"AnyReducer"},{"text":"<","kind":"text"},{"text":"ParentState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/combine(_:)-94fzl":{"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of combining reducers in a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","isActive":true,"type":"reference"},{"type":"text","text":". Read"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","isActive":true},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/combine(_:)-94fzl","deprecated":true,"type":"topic","role":"symbol","title":"combine(_:)","url":"\/documentation\/composablearchitecture\/anyreducer\/combine(_:)-94fzl","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"combine","kind":"identifier"},{"kind":"text","text":"(["},{"text":"AnyReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">]) -> "},{"text":"AnyReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Environment","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","role":"symbol","title":"Scope","url":"\/documentation\/composablearchitecture\/scope","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"kind":"symbol","navigatorTitle":[{"text":"Scope","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and returning their merged effects.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","type":"topic","role":"symbol","title":"ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerBuilder"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReducerBuilder"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer":{"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Read ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"reference","isActive":true},{"text":" for more information.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer","deprecated":true,"type":"topic","role":"symbol","title":"AnyReducer","url":"\/documentation\/composablearchitecture\/anyreducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyReducer"}],"kind":"symbol","navigatorTitle":[{"text":"AnyReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifCaseLet(_:action:then:file:fileID:line:)":{"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducerprotocol\/ifcaselet(_:action:then:file:fileid:line:)","title":"ifCaseLet(_:action:then:file:fileID:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifCaseLet"},{"text":"<","kind":"text"},{"text":"Case","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"text":"Case","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfCaseLetReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","type":"reference","isActive":true},{"type":"text","text":", in both Swift 5.7 and"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"topic","role":"article","title":"Migrating to the reducer protocol","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerDeprecations":{"abstract":[{"type":"text","text":"Review unsupported reducer APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/reducerdeprecations","title":"Deprecations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)","kind":"symbol","title":"scope(state:action:)","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"title":"SwitchStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"type":"topic","abstract":[{"text":"A view that can switch over a store of enum state and handle each case.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"role":"symbol"}}}