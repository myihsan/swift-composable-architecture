{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"prefix"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EffectPublisher","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"inlineContent":[{"type":"text","text":"A string that identifies this effect and will prefix all failure"},{"text":" ","type":"text"},{"text":"messages.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An effect that causes a test to fail if it runs."}]}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"This Combine-based interface has been soft-deprecated in favor of Swift","type":"text"},{"type":"text","text":" "},{"text":"concurrency. Prefer using async functions and ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"text":"s directly in your dependencies,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and using "},{"type":"codeVoice","code":"unimplemented"},{"type":"text","text":" from the "},{"isActive":true,"identifier":"gh-xctest-dynamic-overlay","type":"reference"},{"text":" ","type":"text"},{"text":"library to stub in a function that fails when invoked:","type":"text"}]},{"type":"codeListing","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}","","extension NumberFactClient: TestDependencyKey {","  static let testValue = Self(","    fetch: unimplemented(","      \"\\(Self.self).fetch\",","      placeholder: \"Not an interesting number.\"","    )","  }","}"],"syntax":"swift"}],"style":"important"},{"type":"paragraph","inlineContent":[{"text":"This effect can provide an additional layer of certainty that a tested code path does not","type":"text"},{"text":" ","type":"text"},{"text":"execute a particular effect.","type":"text"}]},{"inlineContent":[{"text":"For example, let’s say we have a very simple counter application, where a user can increment","type":"text"},{"text":" ","type":"text"},{"text":"and decrement a number. The state and actions are simple enough:","type":"text"}],"type":"paragraph"},{"code":["struct CounterState: Equatable {","  var count = 0","}","","enum CounterAction: Equatable {","  case decrementButtonTapped","  case incrementButtonTapped","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s throw in a side effect. If the user attempts to decrement the counter below zero, the"},{"text":" ","type":"text"},{"type":"text","text":"application should refuse and play an alert sound instead."}]},{"type":"paragraph","inlineContent":[{"text":"We can model playing a sound in the environment with an effect:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterEnvironment {","  let playAlertSound: () -> EffectPublisher<Never, Never>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we’ve defined the domain, we can describe the logic in a reducer:"}]},{"code":["let counterReducer = AnyReducer<","  CounterState, CounterAction, CounterEnvironment","> { state, action, environment in","  switch action {","  case .decrementButtonTapped:","    if state > 0 {","      state.count -= 0","      return .none","    } else {","      return environment.playAlertSound()","        .fireAndForget()","    }","","  case .incrementButtonTapped:","    state.count += 1","    return .none","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Let’s say we want to write a test for the increment path. We can see in the reducer that it"},{"type":"text","text":" "},{"type":"text","text":"should never play an alert, so we can configure the environment with an effect that will"},{"type":"text","text":" "},{"type":"text","text":"fail if it ever executes:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testIncrement() async {","  let store = TestStore(","    initialState: CounterState(count: 0)","    reducer: counterReducer,","    environment: CounterEnvironment(","      playSound: .unimplemented(\"playSound\")","    )","  )","","  await store.send(.increment) {","    $0.count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By using an "},{"type":"codeVoice","code":".unimplemented"},{"type":"text","text":" effect in our environment we have strengthened the assertion and"},{"type":"text","text":" "},{"text":"made the test easier to understand at the same time. We can see, without consulting the","type":"text"},{"type":"text","text":" "},{"text":"reducer itself, that this particular action should not access this effect.","type":"text"}]}],"kind":"content"}],"metadata":{"title":"unimplemented(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"platforms":[],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unimplemented"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","kind":"typeIdentifier","text":"EffectPublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"text":">","kind":"text"}],"symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Type Method","externalID":"s:22ComposableArchitecture15EffectPublisherV13unimplementedyACyxq_GSSFZ","extendedModule":"ComposableArchitecture","role":"symbol"},"abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations"]]},"sections":[],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call 'unimplemented' from your dependencies, instead."}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/effectpublisher\/unimplemented(_:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/unimplemented(_:)"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/unimplemented(_:)":{"url":"\/documentation\/composablearchitecture\/effectpublisher\/unimplemented(_:)","deprecated":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/unimplemented(_:)","title":"unimplemented(_:)","role":"symbol","abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"type":"topic","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Failure","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"gh-xctest-dynamic-overlay":{"url":"gh-xctest-dynamic-overlay","identifier":"gh-xctest-dynamic-overlay","title":"XCTest Dynamic Overlay","titleInlineContent":[{"text":"XCTest Dynamic Overlay","type":"text"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectDeprecations":{"type":"topic","title":"Deprecations","url":"\/documentation\/composablearchitecture\/effectdeprecations","abstract":[{"type":"text","text":"Review unsupported effect APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations","role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"title":"EffectPublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effectpublisher","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectPublisher"}]}}}