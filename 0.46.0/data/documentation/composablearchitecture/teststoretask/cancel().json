{"sections":[],"metadata":{"role":"symbol","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture13TestStoreTaskV6cancelyyYaF","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"kind":"text","text":"() "},{"text":"async","kind":"keyword"}],"title":"cancel()","symbolKind":"method"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"cancel"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"async"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This can be handy when a feature needs to start a long-living effect when the feature appears,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but cancellation of that effect is handled by the parent when the feature disappears. Such"},{"type":"text","text":" "},{"type":"text","text":"a feature is difficult to exhaustively test in isolation because there is no action in its"},{"type":"text","text":" "},{"text":"domain that cancels the effect:","type":"text"}]},{"type":"codeListing","code":["let store = TestStore(\/* ... *\/)","","let onAppearTask = await store.send(.onAppear)","\/\/ Assert what is happening in the feature","","await onAppearTask.cancel() \/\/ âœ… Cancel the task to simulate the feature disappearing."],"syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"]]},"abstract":[{"type":"text","text":"Cancels the underlying task and waits for it to finish."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/teststoretask\/cancel()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask\/cancel()","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:file:line:)-1ax61":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:file:line:)-1ax61","kind":"symbol","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ScopedAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"ScopedState","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","title":"send(_:assert:file:line:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"type":"topic","kind":"symbol","role":"symbol","title":"TestStoreTask","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStoreTask","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststoretask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","abstract":[{"text":"The type returned from ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","isActive":true,"type":"reference"},{"text":" that represents the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lifecycle of the effect started from sending an action."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"type":"topic","kind":"symbol","role":"symbol","title":"TestStore","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask/cancel()":{"title":"cancel()","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Cancels the underlying task and waits for it to finish.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask\/cancel()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststoretask\/cancel()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}