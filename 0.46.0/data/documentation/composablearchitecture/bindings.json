{"seeAlsoSections":[{"generated":true,"anchor":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)"],"title":"Bindings"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"kind":"article","sections":[],"metadata":{"title":"Working with SwiftUI bindings","role":"article","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state"},{"text":" ","type":"text"},{"type":"text","text":"and a view. The Composable Architecture provides several tools for creating bindings that establish"},{"text":" ","type":"text"},{"type":"text","text":"such communication with your application’s store."}]},{"type":"heading","text":"Ad hoc bindings","anchor":"Ad-hoc-bindings","level":3},{"type":"paragraph","inlineContent":[{"text":"The simplest tool for creating bindings that communicate with your store is","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","type":"reference","isActive":true},{"type":"text","text":", which is handed two closures: one that describes how to"},{"type":"text","text":" "},{"text":"transform state into the binding’s value, and one that describes how to transform the binding’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value into an action that can be fed back into the store."}]},{"inlineContent":[{"type":"text","text":"For example, a reducer may have a domain that tracks if user has enabled haptic feedback. First, it"},{"type":"text","text":" "},{"type":"text","text":"can define a boolean property on state:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    var isHapticFeedbackEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must"},{"type":"text","text":" "},{"type":"text","text":"define a corresponding action that can be sent updates:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticFeedbackEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"When the reducer handles this action, it can update state accordingly:"}],"type":"paragraph"},{"type":"codeListing","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case let .isHapticFeedbackEnabledChanged(isEnabled):","      state.isHapticFeedbackEnabled = isEnabled","      return .none","","    \/\/ ...","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"text":" ","type":"text"},{"text":"communicate with our Composable Architecture feature:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SettingsView: View {","  let store: StoreOf<Settings>","  ","  var body: some View {","    WithViewStore(self.store) { viewStore in","      Form {","        Toggle(","          \"Haptic feedback\",","          isOn: viewStore.binding(","            get: \\.isHapticFeedbackEnabled,","            send: { .isHapticFeedbackEnabledChanged($0) }","          )","        )","","        \/\/ ...","      }","    }","  }","}"]},{"type":"heading","anchor":"Bindable-state-actions-and-reducers","level":3,"text":"Bindable state, actions, and reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"text":" ","type":"text"},{"text":"a collection of tools that can be applied to a reducer’s domain and logic to make this easier.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"type":"text","text":"means that each field requires a corresponding action that can be sent to the store. Typically this"},{"type":"text","text":" "},{"type":"text","text":"comes in the form of an enum with a case per field:"}]},{"code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the state at each field with a new value:"}]},{"syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case let digestChanged(digest):","      state.digest = digest","      return .none","","    case let displayNameChanged(displayName):","      state.displayName = displayName","      return .none","","    case let enableNotificationsChanged(isOn):","      state.enableNotifications = isOn","      return .none","","    case let protectMyPostsChanged(isOn):","      state.protectMyPosts = isOn","      return .none","","    case let sendEmailNotificationsChanged(isOn):","      state.sendEmailNotifications = isOn","      return .none","","    case let sendMobileNotificationsChanged(isOn):","      state.sendMobileNotifications = isOn","      return .none","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"type":"text","text":" "},{"type":"text","text":"eliminate this boilerplate using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true,"type":"reference"},{"text":", and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"First, we can annotate each bindable value of state with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","isActive":true},{"type":"text","text":" property wrapper:"}],"type":"paragraph"},{"code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    @BindableState var digest = Digest.daily","    @BindableState var displayName = \"\"","    @BindableState var enableNotifications = false","    var isLoading = false","    @BindableState var protectMyPosts = false","    @BindableState var sendEmailNotifications = false","    @BindableState var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Each annotated field is directly bindable to SwiftUI controls, like pickers, toggles, and text","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fields. Notably, the "},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" property is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" annotated as being bindable, which prevents the","type":"text"},{"text":" ","type":"text"},{"text":"view from mutating this value directly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Next, we can conform the action type to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true,"type":"reference"},{"text":" by collapsing all of the individual,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field-mutating actions into a single case that holds a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference","isActive":true},{"type":"text","text":" generic over the reducer’s"},{"type":"text","text":" "},{"text":"state:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by allowing the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true},{"type":"text","text":" to handle these"},{"type":"text","text":" "},{"type":"text","text":"field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some ReducerProtocol<State, Action> {","    BindingReducer()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions are constructed and sent to the store by calling"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)","isActive":true,"type":"reference"},{"type":"text","text":" with a key path to the bindable state:"}]},{"syntax":"swift","type":"codeListing","code":["TextField(\"Display name\", text: viewStore.binding(\\.$displayName))"]},{"inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your reducer can pattern"},{"text":" ","type":"text"},{"text":"match the action for a given key path:","type":"text"}],"type":"paragraph"},{"code":["var body: some ReducerProtocol<State, Action> {","  BindingReducer()","","  Reduce { state, action in ","    case .binding(\\.$displayName):","      \/\/ Validate display name","  ","    case .binding(\\.$enableNotifications):","      \/\/ Return an authorization request effect","  ","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send"},{"type":"text","text":" "},{"text":"a specific action describing how a binding changed, such as ","type":"text"},{"code":".displayNameChanged(\"Blob\")","type":"codeVoice"},{"text":", you will","type":"text"},{"type":"text","text":" "},{"text":"send a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference","isActive":true},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":".set(\\.$displayName, \"Blob\")"},{"text":":","type":"text"}]},{"code":["let store = TestStore(","  initialState: Settings.State(),","  reducer: Settings()",")","","store.send(.set(\\.$displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.$protectMyPosts, true)) {","  $0.protectMyPosts = true",")"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindings"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(_:file:fileID:line:)":{"kind":"symbol","type":"topic","title":"binding(_:file:fileID:line:)","abstract":[{"type":"text","text":"Returns a binding to the resulting bindable state of a given key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ViewAction.State"},{"type":"text","text":" and "},{"code":"ViewAction","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BindableAction"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/viewstore\/binding(_:file:fileid:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"binding","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13BindableStateV","kind":"typeIdentifier","text":"BindableState"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier","text":"Binding"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"role":"symbol","title":"BindingAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"get"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"send","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Binding","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","abstract":[{"text":"Derives a binding from the store that prevents direct writes to state and instead sends","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actions to the store."}],"role":"symbol","title":"binding(get:send:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"kind":"symbol","type":"topic","title":"BindableState","abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindableAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","url":"\/documentation\/composablearchitecture\/bindableaction","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"role":"symbol","title":"BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"kind":"article","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","type":"topic","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftui","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","type":"topic"}}}