{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"role":"symbol","symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActorIsolated","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Class","title":"ActorIsolated","externalID":"s:22ComposableArchitecture13ActorIsolatedC"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/ScA"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/actorisolated"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"Testing","title":"Testing","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"]}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@dynamicMemberLookup","kind":"attribute"},{"text":" ","kind":"text"},{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"actor"},{"text":" ","kind":"text"},{"text":"ActorIsolated","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This type is most useful when writing tests for when you want to inspect what happens inside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an effect. For example, suppose you have a feature such that when a button is tapped you"},{"type":"text","text":" "},{"text":"track some analytics:","type":"text"}]},{"code":["@Dependency(\\.analytics) var analytics","","func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","  switch action {","  case .buttonTapped:","    return .fireAndForget { try await self.analytics.track(\"Button Tapped\") }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in tests we can construct an analytics client that appends events to a mutable array"},{"text":" ","type":"text"},{"type":"text","text":"rather than actually sending events to an analytics server. However, in order to do this in"},{"text":" ","type":"text"},{"type":"text","text":"a safe way we should use an actor, and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","type":"reference"},{"type":"text","text":" makes this easy:"}]},{"code":["@MainActor","func testAnalytics() async {","  let store = TestStore(â€¦)","","  let events = ActorIsolated<[String]>([])","  store.dependencies.analytics = AnalyticsClient(","    track: { event in","      await events.withValue { $0.append(event) }","    }","  )","","  await store.send(.buttonTapped)","","  await events.withValue { XCTAssertEqual($0, [\"Button Tapped\"]) }","}"],"type":"codeListing","syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/init(_:)"],"generated":true},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/value"],"title":"Instance Properties","anchor":"Instance-Properties","generated":true},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/subscript(dynamicMember:)"],"title":"Subscripts","anchor":"Subscripts","generated":true},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/Actor-Implementations"],"anchor":"Default-Implementations"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/withValue(_:)":{"url":"\/documentation\/composablearchitecture\/actorisolated\/withvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withValue","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"type":"topic","abstract":[{"text":"Perform an operation with isolated access to the underlying value.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)","kind":"symbol","title":"withValue(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/subscript(dynamicMember:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/subscript(dynamicMember:)","kind":"symbol","type":"topic","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"text":"<","kind":"text"},{"text":"Subject","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"dynamicMember","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"Subject","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Subject","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/actorisolated\/subscript(dynamicmember:)","abstract":[],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/value":{"url":"\/documentation\/composablearchitecture\/actorisolated\/value","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","abstract":[{"type":"text","text":"The actor-isolated value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/value","kind":"symbol","title":"value","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/composablearchitecture\/actorisolated","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","title":"ActorIsolated","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/init(_:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Initializes actor-isolated state around a value."}],"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/init(_:)","url":"\/documentation\/composablearchitecture\/actorisolated\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/Actor-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/Actor-Implementations","kind":"article","type":"topic","title":"Actor Implementations","url":"\/documentation\/composablearchitecture\/actorisolated\/actor-implementations","abstract":[],"role":"collectionGroup"},"doc://ComposableArchitecture/ScA":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/ScA","title":"_Concurrency.Actor"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/setValue(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)","kind":"symbol","type":"topic","title":"setValue(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/actorisolated\/setvalue(_:)","abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"role":"symbol"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"type":"topic","kind":"symbol","role":"symbol","title":"TestStore","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}]}}}