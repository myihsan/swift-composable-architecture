{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState\/Hashable-Implementations"]]},"metadata":{"extendedModule":"ComposableArchitecture","platforms":[{"introducedAt":"13.0","deprecated":false,"name":"iOS","beta":false,"unavailable":false},{"deprecated":false,"name":"macOS","beta":false,"introducedAt":"12.0","unavailable":false},{"introducedAt":"13.0","name":"tvOS","unavailable":false,"beta":false,"deprecated":false},{"introducedAt":"6.0","deprecated":false,"beta":false,"name":"watchOS","unavailable":false}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"text":")","kind":"text"}],"roleHeading":"Instance Method","title":"hash(into:)","conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"externalID":"s:22ComposableArchitecture23ConfirmationDialogStateVAASHRzlE4hash4intoys6HasherVz_tF","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"method"},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"Hashable.hash(into:)"},{"type":"text","text":"."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hash"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"kind":"text","text":" "},{"text":"hasher","kind":"internalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/confirmationdialogstate\/hash(into:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState\/hash(into:)","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ConfirmationDialogState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState","navigatorTitle":[{"text":"ConfirmationDialogState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/confirmationdialogstate","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConfirmationDialogState"}],"kind":"symbol","type":"topic","abstract":[{"text":"A data type that describes the state of a confirmation dialog that can be shown to the user. The","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" generic is the type of actions that can be sent from tapping on a button in the sheet.","type":"text"}],"title":"ConfirmationDialogState","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ConfirmationDialogState/hash(into:)":{"title":"hash(into:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState\/hash(into:)","abstract":[],"type":"topic","url":"\/documentation\/composablearchitecture\/confirmationdialogstate\/hash(into:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ConfirmationDialogState/Hashable-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ConfirmationDialogState\/Hashable-Implementations","title":"Hashable Implementations","url":"\/documentation\/composablearchitecture\/confirmationdialogstate\/hashable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"kind":"article","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","type":"topic","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftui","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}