{"sections":[],"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"metadata":{"externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"title":"send(_:while:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An action.","type":"text"}]}],"name":"action"},{"content":[{"inlineContent":[{"type":"text","text":"A predicate on "},{"type":"codeVoice","code":"ViewState"},{"text":" that determines for how long this method should","type":"text"},{"type":"text","text":" "},{"text":"suspend.","type":"text"}],"type":"paragraph"}],"name":"predicate"}]},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"This method can be used to interact with async\/await code, allowing you to suspend while work","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is being performed in an effect. One common example of this is using SwiftUI’s "},{"code":".refreshable","type":"codeVoice"},{"type":"text","text":" "},{"text":"method, which shows a loading indicator on the screen while work is being performed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:"}]},{"type":"codeListing","code":["struct Feature: ReducerProtocol {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(TaskResult<String>)","  }","  @Dependency(\\.fetch) var fetch","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .pulledToRefresh:","      state.isLoading = true","      return .task {","        await .receivedResponse(TaskResult { try await self.fetch() })","      }","","    case let .receivedResponse(result):","      state.isLoading = false","      state.response = try? result.value","      return .none","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that we keep track of an ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"text":" boolean in our state so that we know exactly when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the network response is being performed."}]},{"type":"paragraph","inlineContent":[{"text":"The view can show the fact in a ","type":"text"},{"type":"codeVoice","code":"List"},{"text":", if it’s present, and we can use the ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"type":"codeListing","code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Here we’ve used the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"},{"text":" method to suspend while the ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" state is"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":". Once that piece of state flips back to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" the method will resume, signaling to"},{"text":" ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"text":" that the work has finished which will cause the loading indicator to disappear.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStoreTask"],"anchor":"Sending-actions","generated":true,"title":"Sending actions"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"text":"while","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","kind":"symbol","abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)","title":"yield(while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","kind":"symbol","abstract":[{"text":"Sends an action into the store and then suspends while a piece of state is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)","title":"send(_:while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStoreTask":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ViewStoreTask","kind":"identifier"}],"abstract":[{"type":"text","text":"The type returned from "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","type":"reference","isActive":true},{"text":" that represents the lifecycle of the effect","type":"text"},{"text":" ","type":"text"},{"text":"started from sending an action.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStoreTask"}],"type":"topic","url":"\/documentation\/composablearchitecture\/viewstoretask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStoreTask","title":"ViewStoreTask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ViewStoreTask","preciseIdentifier":"s:22ComposableArchitecture13ViewStoreTaskV"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","kind":"symbol","abstract":[{"type":"text","text":"Sends an action to the store."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)","title":"send(_:)"}}}