{"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"seeAlsoSections":[{"generated":true,"title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"],"anchor":"State-management"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerProtocol"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","text":"Action"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform types to this protocol to represent the domain, logic and behavior for your feature."},{"text":" ","type":"text"},{"type":"text","text":"The domain is specified by the “state” and “actions”, which can be nested types inside the"},{"type":"text","text":" "},{"type":"text","text":"conformance:"}]},{"type":"codeListing","code":["struct Feature: ReducerProtocol {","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"text":"The logic of your feature is implemented by mutating the feature’s current state when an action","type":"text"},{"type":"text","text":" "},{"text":"comes into the system. This is most easily done by implementing the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","isActive":true},{"type":"text","text":" method of the protocol."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Feature: ReducerProtocol {","  \/\/ ...","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" method’s first responsibility is to mutate the feature’s current state given an"},{"type":"text","text":" "},{"type":"text","text":"action. Its second responsibility is to return effects that will be executed asynchronously"},{"text":" ","type":"text"},{"text":"and feed their data back into the system. Currently ","type":"text"},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" does not need to run any effects,"},{"type":"text","text":" "},{"text":"and so ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/none","isActive":true},{"text":" is returned.","type":"text"}]},{"inlineContent":[{"type":"text","text":"If the feature does need to do effectful work, then more would need to be done. For example,"},{"text":" ","type":"text"},{"type":"text","text":"suppose the feature has the ability to start and stop a timer, and with each tick of the timer"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" will be incremented. That could be done like so:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","    case startTimerButtonTapped","    case stopTimerButtonTapped","    case timerTick","  }","  enum TimerID {}","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","","    case .startTimerButtonTapped:","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","          await send(.timerTick)","        }","      }","      .cancellable(TimerID.self)","","    case .stopTimerButtonTapped:","      return .cancel(TimerID.self)","","    case .timerTick:","      state.count += 1","      return .none","    }","  }","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample emulates a timer by performing an infinite loop with a "},{"code":"Task.sleep","type":"codeVoice"},{"text":" ","type":"text"},{"text":"inside. This is simple to do, but is also inaccurate since small imprecisions can accumulate.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It would be better to inject a clock into the feature so that you could use its "},{"type":"codeVoice","code":"timer"},{"text":" ","type":"text"},{"text":"method. Read the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"text":"doc:Testing","type":"text"},{"type":"text","text":" articles for more"},{"text":" ","type":"text"},{"type":"text","text":"information."}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"That is the basics of implementing a feature as a conformance to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","isActive":true},{"type":"text","text":". There are"},{"type":"text","text":" "},{"type":"text","text":"actually two ways to define a reducer:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can either implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq"},{"text":" method, as shown above, which","type":"text"},{"type":"text","text":" "},{"text":"is given direct mutable access to application ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","isActive":true,"type":"reference"},{"text":" whenever an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action"},{"type":"text","text":" is fed into"},{"type":"text","text":" "},{"type":"text","text":"the system, and returns an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","isActive":true},{"text":" that can communicate with the outside world and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feed additional "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","type":"reference","isActive":true},{"type":"text","text":"s back into the system."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Or you can implement the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-7foai"},{"type":"text","text":" property, which combines one or"},{"type":"text","text":" "},{"text":"more reducers together.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"At most one of these requirements should be implemented. If a conformance implements both"},{"text":" ","type":"text"},{"type":"text","text":"requirements, only "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","isActive":true},{"text":" will be called by the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":". If your"},{"type":"text","text":" "},{"text":"reducer assembles a body from other reducers ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" has additional business logic it needs to"},{"type":"text","text":" "},{"type":"text","text":"layer onto the feature, introduce this logic into the body instead, either with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some ReducerProtocol<State, Action> {","  Reduce { state, action in","    \/\/ extra logic","  }","  Activity()","  Profile()","  Settings()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"…or moving the extra logic to a method that is wrapped in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some ReducerProtocol<State, Action> {","  Reduce(self.core)","  Activity()","  Profile()","  Settings()","}","","func core(state: inout State, action: Action) -> EffectTask<Action> {","  \/\/ extra logic","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you are implementing a custom reducer operator that transforms an existing reducer,","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"text":" invoke the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","type":"reference"},{"text":" method, never the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-7foai","isActive":true},{"type":"text","text":". For example, this operator that logs all actions sent to the"},{"type":"text","text":" "},{"text":"reducer:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension ReducerProtocol {","  func logActions() -> some ReducerProtocol<State, Action> {","    Reduce { state, action in","      print(\"Received action: \\(action)\")","      return self.reduce(into: &state, action: action)","    }","  }","}"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/reducerprotocol"]}],"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerProtocol","kind":"identifier"}],"externalID":"s:22ComposableArchitecture15ReducerProtocolP","title":"ReducerProtocol","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Protocol","symbolKind":"protocol","role":"symbol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}]},"relationshipsSections":[{"type":"conformingTypes","title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"]}],"topicSections":[{"title":"Implementing a reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"],"anchor":"Implementing-a-reducer"},{"title":"Reducer composition","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-97ymy","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Body-swift.typealias","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:_:file:fileID:line:)"],"anchor":"Reducer-composition"},{"anchor":"Supporting-reducers","title":"Supporting reducers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"]},{"title":"Reducer modifiers","anchor":"Reducer-modifiers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/dependency(_:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/transformDependency(_:transform:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/signpost(_:log:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/debug()"]},{"title":"Deprecations","anchor":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"https://developer.apple.com/documentation/os/logging/recording_performance_data":{"type":"link","title":"signposts","titleInlineContent":[{"text":"signposts","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data","url":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"type":"topic","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Reduce","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reduce","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" function."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerDeprecations":{"abstract":[{"type":"text","text":"Review unsupported reducer APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/reducerdeprecations","title":"Deprecations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifLet(_:action:then:file:fileID:line:)":{"url":"\/documentation\/composablearchitecture\/reducerprotocol\/iflet(_:action:then:file:fileid:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"kind":"text","text":", "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":">, ","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"text":"_IfLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","kind":"symbol","title":"ifLet(_:action:then:file:fileID:line:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/transformDependency(_:transform:)":{"role":"symbol","abstract":[{"type":"text","text":"Transform a reducer’s dependency value at the specified key path with the given function."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducerprotocol\/transformdependency(_:transform:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"transformDependency","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":">, "},{"text":"transform","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/transformDependency(_:transform:)","type":"topic","title":"transformDependency(_:transform:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"title":"EffectPublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effectpublisher","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectPublisher"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/none":{"kind":"symbol","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Failure"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"text":"return an effect, but you don’t need to do anything.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","text":"EffectPublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Failure","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"none","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/none","url":"\/documentation\/composablearchitecture\/effectpublisher\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Optional":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","kind":"symbol","type":"topic","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ReducerProtocol"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/swift\/optional","title":"Optional","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"role":"symbol","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier","preciseIdentifier":"s:Sq"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/Body-swift.typealias":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Body"}],"kind":"symbol","navigatorTitle":[{"text":"Body","kind":"identifier"}],"title":"ReducerProtocol.Body","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Body-swift.typealias","abstract":[{"type":"text","text":"A type representing the body of this reducer."}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/body-swift.typealias","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and returning their merged effects.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","type":"topic","role":"symbol","title":"ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerBuilder"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReducerBuilder"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifCaseLet(_:action:then:file:fileID:line:)":{"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducerprotocol\/ifcaselet(_:action:then:file:fileid:line:)","title":"ifCaseLet(_:action:then:file:fileID:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifCaseLet"},{"text":"<","kind":"text"},{"text":"Case","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"text":"Case","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfCaseLetReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/forEach(_:action:_:file:fileID:line:)":{"url":"\/documentation\/composablearchitecture\/reducerprotocol\/foreach(_:action:_:file:fileid:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Element","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","text":"Action"},{"kind":"text","text":")>, () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"_ForEachReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:_:file:fileID:line:)","kind":"symbol","title":"forEach(_:action:_:file:fileID:line:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/Action":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Action"}],"required":true,"kind":"symbol","title":"Action","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","isActive":true},{"text":" of the reducer to change","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","type":"reference","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/action","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/body-97ymy":{"url":"\/documentation\/composablearchitecture\/reducerprotocol\/body-97ymy","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Body","kind":"typeIdentifier"}],"type":"topic","required":true,"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-97ymy","kind":"symbol","title":"body","role":"symbol","defaultImplementations":1},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/State":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}],"required":true,"kind":"symbol","title":"State","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/state","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/dependency(_:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/dependency(_:_:)","abstract":[{"type":"text","text":"Sets the dependency value of the specified key path to the given value."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","kind":"symbol","title":"dependency(_:_:)","url":"\/documentation\/composablearchitecture\/reducerprotocol\/dependency(_:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/signpost(_:log:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/signpost(_:log:)","abstract":[{"type":"text","text":"Instruments a reducer with"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"signpost"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"log"},{"kind":"text","text":": "},{"preciseIdentifier":"c:objc(cs)OS_os_log","text":"OSLog","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_SignpostReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"signpost(_:log:)","url":"\/documentation\/composablearchitecture\/reducerprotocol\/signpost(_:log:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/body-7foai":{"title":"body","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"_Body","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A non-existent body."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducerprotocol\/body-7foai","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-7foai","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Body","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP4Bodya"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"title":"Dependencies","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/reduce(into:action:)-8yinq":{"role":"symbol","abstract":[{"type":"text","text":"Evolves the current state of the reducer to the next state."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducerprotocol\/reduce(into:action:)-8yinq","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","text":"Action"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10EffectTaska","text":"EffectTask"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","required":true,"type":"topic","title":"reduce(into:action:)","defaultImplementations":1},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmptyReducer"}],"type":"topic","title":"EmptyReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyReducer"}],"url":"\/documentation\/composablearchitecture\/emptyreducer","abstract":[{"type":"text","text":"A reducer that does nothing."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"url":"\/documentation\/composablearchitecture\/combinereducers","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CombineReducers","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","kind":"symbol","title":"CombineReducers","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","role":"symbol","title":"Scope","url":"\/documentation\/composablearchitecture\/scope","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"kind":"symbol","navigatorTitle":[{"text":"Scope","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/debug()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/debug()","kind":"symbol","type":"topic","title":"debug()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"debug"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"_PrintChangesReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/debug()","abstract":[],"deprecated":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"}}}