{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"],"title":"View containers","generated":true,"anchor":"View-containers"}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"externalID":"s:22ComposableArchitecture13WithViewStoreV","symbolKind":"struct","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","title":"WithViewStore"},"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"topicSections":[{"title":"Creating a view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)"],"anchor":"Creating-a-view"},{"title":"Debugging view updates","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/debug(_:)"],"anchor":"Debugging-view-updates"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/Scene-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/ToolbarContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI25AccessibilityRotorContentP","doc:\/\/ComposableArchitecture\/7SwiftUI8CommandsP","doc:\/\/ComposableArchitecture\/7SwiftUI5SceneP","doc:\/\/ComposableArchitecture\/7SwiftUI14ToolbarContentP","doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Content","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"This helper is an alternative to observing the view store manually on your view, which requires","type":"text"},{"text":" ","type":"text"},{"text":"the boilerplate of a custom initializer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, the following view, which manually observes the store it is handed by constructing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a view store in its initializer:"}]},{"type":"codeListing","code":["struct ProfileView: View {","  let store: Store<ProfileState, ProfileAction>","  @ObservedObject var viewStore: ViewStore<ProfileState, ProfileAction>","","  init(store: Store<ProfileState, ProfileAction>) {","    self.store = store","    self.viewStore = ViewStore(store)","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"…can be written more simply using ","type":"text"},{"code":"WithViewStore","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["struct ProfileView: View {","  let store: Store<ProfileState, ProfileAction>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"There may be times where the slightly more verbose style of observing a store is preferred","type":"text"},{"text":" ","type":"text"},{"text":"instead of using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged down,"},{"type":"text","text":" "},{"type":"text","text":"leading to degraded compiler performance and diagnostics. If you are experience such instability"},{"type":"text","text":" "},{"text":"you should consider manually setting up observation with an ","type":"text"},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" property as"},{"type":"text","text":" "},{"text":"described above.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Sometimes you may want to observe the state in a store in a context that is not a view","type":"text"},{"type":"text","text":" "},{"text":"builder. In such cases ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" will not work since it is intended only for SwiftUI"},{"text":" ","type":"text"},{"text":"views.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"type":"text","text":" protocol, which uses a separate"},{"type":"text","text":" "},{"type":"codeVoice","code":"@SceneBuilder"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":". In this case you must use an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":":"}]},{"code":["@main","struct MyApp: App {","  let store = Store<AppState, AppAction>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppState) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppAction.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that it is highly discouraged for you to observe "},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"text":" of your root store’s state.","type":"text"},{"text":" ","type":"text"},{"text":"It is almost never needed and will cause many view recomputations leading to poor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance. This is why we construct a separate "},{"type":"codeVoice","code":"SceneState"},{"type":"text","text":" type that holds onto only the"},{"text":" ","type":"text"},{"text":"state that the view needs for rendering. See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","type":"reference","isActive":true},{"text":" for more information on this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"topic."}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"If your view does not need access to any state in the store and only needs to be able to send"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":" at all. Instead, you can send"},{"type":"text","text":" "},{"type":"text","text":"actions to a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" in a lightweight way like so:"}],"type":"paragraph"},{"type":"codeListing","code":["Button(\"Tap me\") {","  ViewStore(self.store).send(.buttonTapped)","}"],"syntax":"swift"},{"anchor":"Overview","level":2,"text":"Overview","type":"heading"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Content","kind":"typeIdentifier"}],"role":"symbol","title":"body","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/body","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/ToolbarContent-Implementations":{"title":"ToolbarContent Implementations","url":"\/documentation\/composablearchitecture\/withviewstore\/toolbarcontent-implementations","abstract":[],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/ToolbarContent-Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"url":"\/documentation\/composablearchitecture\/performance","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"title":"Performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/Scene-Implementations":{"url":"\/documentation\/composablearchitecture\/withviewstore\/scene-implementations","kind":"article","title":"Scene Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/Scene-Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"title":"View Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","type":"topic"},"doc://ComposableArchitecture/7SwiftUI14ToolbarContentP":{"type":"unresolvable","title":"SwiftUI.ToolbarContent","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI14ToolbarContentP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","type":"topic","kind":"article","role":"collectionGroup","abstract":[],"title":"DynamicViewContent Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","title":"SwiftUICore.View","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"kind":"article","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","type":"topic","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftui","role":"collectionGroup"},"doc://ComposableArchitecture/7SwiftUI8CommandsP":{"type":"unresolvable","title":"SwiftUI.Commands","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI8CommandsP"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/7SwiftUI5SceneP":{"type":"unresolvable","title":"SwiftUI.Scene","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI5SceneP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)":{"title":"init(_:observe:content:file:line:)","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"observe"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"content"},{"text":": (","kind":"text"},{"text":"ViewStore","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" into an observable ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" in order"},{"type":"text","text":" "},{"type":"text","text":"to compute views from state."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Content"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://ComposableArchitecture/7SwiftUI25AccessibilityRotorContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI25AccessibilityRotorContentP","title":"SwiftUI.AccessibilityRotorContent","type":"unresolvable"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","title":"SwiftUICore.DynamicViewContent","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","title":"ForEachStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/debug(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/debug(_:)","url":"\/documentation\/composablearchitecture\/withviewstore\/debug(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"debug","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV","kind":"typeIdentifier","text":"WithViewStore"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Content"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Prints debug information to the console whenever the view is computed."}],"title":"debug(_:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"title":"SwitchStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"type":"topic","abstract":[{"text":"A view that can switch over a store of enum state and handle each case.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"role":"symbol"}}}