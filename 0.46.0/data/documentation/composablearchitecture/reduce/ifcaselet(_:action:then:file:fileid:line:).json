{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/ReducerProtocol-Implementations"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/ifCaseLet(_:action:then:file:fileID:line:)","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"ifCaseLet(_:action:then:file:fileID:line:)","externalID":"s:22ComposableArchitecture15ReducerProtocolPAAE9ifCaseLet_6action4then4file0J2ID4lineAA03_IffgC0Vyxqd__G0F5Paths0F4PathVy5StateQzAPQyd__G_AOy6ActionQzATQyd__Gqd__yXEs12StaticStringVAYSutAaBRd__lF::SYNTHESIZED::s:22ComposableArchitecture6ReduceV","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifCaseLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"text":"Case","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfCaseLetReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}],"extendedModule":"ComposableArchitecture"},"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/reduce\/ifcaselet(_:action:then:file:fileid:line:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifCaseLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Case","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"toCaseState","kind":"internalParam"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","text":"State"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"toCaseAction"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","text":"Action"},{"text":">, ","kind":"text"},{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:22ComposableArchitecture16ReducerBuilderOfa","text":"ReducerBuilderOf","kind":"attribute","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilderOf"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Case"},{"text":">","kind":"text"},{"kind":"text","text":" "},{"text":"then","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"case","kind":"internalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"text":"#file","kind":"keyword"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"text":"#fileID","kind":"keyword"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":" = "},{"text":"#line","kind":"keyword"},{"kind":"text","text":") -> "},{"text":"_IfCaseLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Case"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP","text":"ReducerProtocol"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"toCaseState","content":[{"inlineContent":[{"type":"text","text":"A case path from parent state to a case containing child state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A case path from parent action to a case containing child actions.","type":"text"}]}],"name":"toCaseAction"},{"name":"case","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that will be invoked with child actions against child state when it is"},{"type":"text","text":" "},{"text":"present","type":"text"}]}]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A reducer that combines the child reducer with the parent reducer.","type":"text"}]}]},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if a parent featureâ€™s state is expressed as an enum of multiple children"},{"type":"text","text":" "},{"text":"states, then ","type":"text"},{"type":"codeVoice","code":"ifCaseLet"},{"type":"text","text":" can run a child reducer on a particular case of the enum:"}]},{"syntax":"swift","code":["struct Parent: ReducerProtocol {","  enum State {","    case loggedIn(Authenticated.State)","    case loggedOut(Unauthenticated.State)","  }","  enum Action {","    case loggedIn(Authenticated.Action)","    case loggedOut(Unauthenticated.Action)","    \/\/ ...","  }","","  var body: some ReducerProtocol<State, Action> {","    Reduce { state, action in","      \/\/ Core logic for parent feature","    }","    .ifCaseLet(\/State.loggedIn, action: \/Action.loggedIn) {","      Authenticated()","    }","    .ifCaseLet(\/State.loggedOut, action: \/Action.loggedOut) {","      Unauthenticated()","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"ifCaseLet","type":"codeVoice"},{"type":"text","text":" forces a specific order of operations for the child and parent features. It"},{"text":" ","type":"text"},{"type":"text","text":"runs the child first, and then the parent. If the order was reversed, then it would be"},{"text":" ","type":"text"},{"type":"text","text":"possible for the parent feature to change the case of the enum, in which case the child"},{"text":" ","type":"text"},{"type":"text","text":"feature would not be able to react to that action. That can cause subtle bugs."}],"type":"paragraph"},{"inlineContent":[{"text":"It is still possible for a parent feature higher up in the application to change the case of","type":"text"},{"text":" ","type":"text"},{"text":"the enum before the child has a chance to react to the action. In such cases a runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"warning is shown in Xcode to let you know that thereâ€™s a potential problem."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/Action":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Action"}],"required":true,"kind":"symbol","title":"Action","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/Action","abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","isActive":true},{"text":" of the reducer to change","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","type":"reference","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/action","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce/ifCaseLet(_:action:then:file:fileID:line:)":{"url":"\/documentation\/composablearchitecture\/reduce\/ifcaselet(_:action:then:file:fileid:line:)","type":"topic","title":"ifCaseLet(_:action:then:file:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifCaseLet"},{"kind":"text","text":"<"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa","text":"Action"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"_IfCaseLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":">"}],"abstract":[{"text":"Embeds a child reducer in a parent domain that works on a case of parent enum state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/ifCaseLet(_:action:then:file:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"type":"topic","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Reduce","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reduce","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" function."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce/ReducerProtocol-Implementations":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/ReducerProtocol-Implementations","title":"ReducerProtocol Implementations","role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/composablearchitecture\/reduce\/reducerprotocol-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/State":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}],"required":true,"kind":"symbol","title":"State","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/State","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol\/state","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilderOf":{"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerBuilderOf","kind":"identifier"}],"navigatorTitle":[{"text":"ReducerBuilderOf","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilderOf","title":"ReducerBuilderOf","url":"\/documentation\/composablearchitecture\/reducerbuilderof"}}}