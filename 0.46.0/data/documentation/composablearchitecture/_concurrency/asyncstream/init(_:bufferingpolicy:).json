{"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"text":"bufferingPolicy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ScS","text":"AsyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"text":"Continuation","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"text":")","kind":"text"}],"roleHeading":"Initializer","symbolKind":"init","extendedModule":"_Concurrency","title":"init(_:bufferingPolicy:)","role":"symbol","modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}],"externalID":"s:ScS22ComposableArchitectureE_15bufferingPolicyScSyxGqd___ScS12ContinuationV09BufferingD0Oyx__Gtc7ElementQyd__Rszs8SendableRd__SciRd__lufc"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:bufferingPolicy:)","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:bufferingpolicy:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Initializes an ","type":"text"},{"code":"AsyncStream","type":"codeVoice"},{"text":" from any ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":".","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"sequence"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"bufferingPolicy"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"limit"},{"kind":"text","text":": "},{"text":"AsyncStream","preciseIdentifier":"s:ScS","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"text":".","kind":"text"},{"text":"BufferingPolicy","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"text":" = .unbounded) ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":", "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"AsyncSequence","preciseIdentifier":"s:Sci","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"sequence","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncSequence"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of elements to hold in the buffer. By default, this value is","type":"text"},{"type":"text","text":" "},{"text":"unlimited. Use a ","type":"text"},{"type":"codeVoice","code":"Continuation.BufferingPolicy"},{"type":"text","text":" to buffer a specified number of oldest or"},{"type":"text","text":" "},{"type":"text","text":"newest elements."}]}],"name":"limit"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Useful as a type eraser for live ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"-based dependencies."}]},{"inlineContent":[{"type":"text","text":"For example, your feature may want to subscribe to screenshot notifications. You can model"},{"type":"text","text":" "},{"type":"text","text":"this as a dependency client that returns an "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["struct ScreenshotsClient {","  var screenshots: () -> AsyncStream<Void>","  func callAsFunction() -> AsyncStream<Void> { self.screenshots() }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The “live” implementation of the dependency can supply a stream by erasing the appropriate","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter.Notifications"},{"type":"text","text":" async sequence:"}],"type":"paragraph"},{"code":["extension ScreenshotsClient {","  static let live = Self(","    screenshots: {","      AsyncStream(","        NotificationCenter.default","          .notifications(named: UIApplication.userDidTakeScreenshotNotification)","          .map { _ in }","      )","    }","  )","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"While your tests can use "},{"code":"AsyncStream.streamWithContinuation","type":"codeVoice"},{"text":" to spin up a controllable stream","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for tests:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let screenshots = AsyncStream<Void>.streamWithContinuation()","","let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")","","store.dependencies.screenshots.screenshots = { screenshots.stream }","","screenshots.continuation.yield()  \/\/ Simulate a screenshot being taken.","","await store.receive(.screenshotTaken) { ... }"]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency","abstract":[],"kind":"symbol","role":"collection","title":"_Concurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream/init(_:bufferingPolicy:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"text":"bufferingPolicy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AsyncStream","kind":"typeIdentifier","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">."},{"text":"Continuation","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"text":"BufferingPolicy","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"text":")","kind":"text"}],"abstract":[{"text":"Initializes an ","type":"text"},{"code":"AsyncStream","type":"codeVoice"},{"text":" from any ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"init(_:bufferingPolicy:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:bufferingPolicy:)","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:bufferingpolicy:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream":{"fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncStream","preciseIdentifier":"s:ScS","kind":"identifier"}],"title":"AsyncStream","navigatorTitle":[{"kind":"identifier","text":"AsyncStream"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream","type":"topic","role":"symbol"}}}