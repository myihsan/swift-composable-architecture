{"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScS","text":"AsyncStream"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:ScS12ContinuationV","kind":"typeIdentifier","text":"Continuation"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO","text":"BufferingPolicy","kind":"typeIdentifier"},{"kind":"text","text":") -> (stream"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"text":")","kind":"text"}],"externalID":"s:ScS22ComposableArchitectureE22streamWithContinuation_15bufferingPolicyScSyxG0C0_ScS0E0Vyx_G12continuationtxm_AG09BufferingG0Oyx__GtFZ","title":"streamWithContinuation(_:bufferingPolicy:)","modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}],"extendedModule":"_Concurrency","roleHeading":"Type Method","symbolKind":"method","role":"symbol"},"kind":"symbol","abstract":[{"text":"Constructs and returns a stream along with its backing continuation.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/streamwithcontinuation(_:bufferingpolicy:)"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"elementType"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":".Type = Element.self, ","kind":"text"},{"text":"bufferingPolicy","kind":"externalParam"},{"kind":"text","text":" "},{"text":"limit","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScS","text":"AsyncStream"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Continuation","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV"},{"text":".","kind":"text"},{"text":"BufferingPolicy","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"text":" = .unbounded) -> (stream","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">, continuation","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Continuation","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"elementType","content":[{"inlineContent":[{"type":"text","text":"The type of element the "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" produces."}],"type":"paragraph"}]},{"name":"limit","content":[{"inlineContent":[{"type":"text","text":"A Continuation.BufferingPolicy value to set the stream’s buffering behavior. By"},{"text":" ","type":"text"},{"text":"default, the stream buffers an unlimited number of elements. You can also set the policy to","type":"text"},{"type":"text","text":" "},{"text":"buffer a specified number of oldest or newest elements.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncStream"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This is handy for immediately escaping the continuation from an async stream, which typically"},{"text":" ","type":"text"},{"text":"requires multiple steps:","type":"text"}],"type":"paragraph"},{"code":["var _continuation: AsyncStream<Int>.Continuation!","let stream = AsyncStream<Int> { continuation = $0 }","let continuation = _continuation!","","\/\/ vs.","","let (stream, continuation) = AsyncStream<Int>.streamWithContinuation()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This tool is usually used for tests where we need to supply an async sequence to a dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"endpoint and get access to its continuation so that we can emulate the dependency"},{"type":"text","text":" "},{"text":"emitting data. For example, suppose you have a dependency exposing an async sequence for","type":"text"},{"type":"text","text":" "},{"text":"listening to notifications. To test this you can use ","type":"text"},{"type":"codeVoice","code":"streamWithContinuation"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let notifications = AsyncStream<Void>.streamWithContinuation()","","let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")","","store.dependencies.notifications = { notifications.stream }","","await store.send(.task)","notifications.continuation.yield(\"Hello\")  \/\/ Simulate notification being posted","await store.receive(.notification(\"Hello\")) {","  $0.message = \"Hello\"","}"],"type":"codeListing"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"⚠️ "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" does not support multiple subscribers, therefore you can only use"},{"type":"text","text":" "},{"type":"text","text":"this helper to test features that do not subscribe multiple times to the dependency"},{"type":"text","text":" "},{"type":"text","text":"endpoint."}]}],"name":"Warning","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/streamWithContinuation(_:bufferingPolicy:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency","abstract":[],"kind":"symbol","role":"collection","title":"_Concurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream/streamWithContinuation(_:bufferingPolicy:)":{"kind":"symbol","type":"topic","abstract":[{"text":"Constructs and returns a stream along with its backing continuation.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"kind":"text","text":"("},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"bufferingPolicy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AsyncStream","preciseIdentifier":"s:ScS","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"text":"BufferingPolicy","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"text":") -> (stream","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, continuation"},{"text":": ","kind":"text"},{"text":"AsyncStream","kind":"typeIdentifier","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Continuation","kind":"typeIdentifier","preciseIdentifier":"s:ScS12ContinuationV"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/streamWithContinuation(_:bufferingPolicy:)","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/streamwithcontinuation(_:bufferingpolicy:)","title":"streamWithContinuation(_:bufferingPolicy:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream":{"fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncStream","preciseIdentifier":"s:ScS","kind":"identifier"}],"title":"AsyncStream","navigatorTitle":[{"kind":"identifier","text":"AsyncStream"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream","type":"topic","role":"symbol"}}}