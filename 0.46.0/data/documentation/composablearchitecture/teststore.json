{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout"],"title":"Configuring a test store","anchor":"Configuring-a-test-store"},{"anchor":"Testing-a-reducer","title":"Testing a reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-4e4m0","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-3myco","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"]},{"anchor":"Methods-for-skipping-actions-and-effects","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)-a4ri","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)-5hbsk"],"title":"Methods for skipping actions and effects"},{"anchor":"Accessing-state","title":"Accessing state","abstract":[{"type":"text","text":"While the most common way of interacting with a test store’s state is via its "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd"},{"type":"text","text":" methods, you may also access it directly throughout a test."}],"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)"],"anchor":"Scoping-test-stores","title":"Scoping test stores"},{"anchor":"Deprecations","title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"]},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:prepareDependencies:file:line:)"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Class","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"externalID":"s:22ComposableArchitecture9TestStoreC","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"title":"TestStore","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"class"},"sections":[],"seeAlsoSections":[{"title":"Testing","generated":true,"anchor":"Testing","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ScopedState"},{"kind":"text","text":", "},{"text":"ScopedAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Environment"},{"text":">","kind":"text"}]}]},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This object aids in writing expressive and exhaustive tests for features built in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each"},{"text":" ","type":"text"},{"type":"text","text":"step of the way you must assert exactly how state changed, and how effect emissions were fed"},{"type":"text","text":" "},{"text":"back into the system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the dedicated "},{"text":"doc:Testing","type":"text"},{"type":"text","text":" article for detailed information on testing."}]},{"level":2,"text":"Exhaustive testing","anchor":"Exhaustive-testing","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" requires you to exhaustively prove how your feature evolves from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sending use actions and receiving actions from effects. There are multiple ways the test store"},{"text":" ","type":"text"},{"type":"text","text":"forces you to do this:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"After each action is sent you must describe precisely how the state changed from before"},{"type":"text","text":" "},{"text":"the action was sent to after it was sent.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If even the smallest piece of data differs the test will fail. This guarantees that you"},{"type":"text","text":" "},{"type":"text","text":"are proving you know precisely how the state of the system changes."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect sends"},{"text":" ","type":"text"},{"text":"an action back into the system, you ","type":"text"},{"type":"strong","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" explicitly assert that you expect to receive"},{"type":"text","text":" "},{"text":"that action from the effect, ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" you must assert how state changed as a result.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect actions, the"},{"text":" ","type":"text"},{"text":"test will fail. This guarantees that you do not accidentally forget about an effect","type":"text"},{"type":"text","text":" "},{"text":"action, and that the sequence of steps you are describing will mimic how the application","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behaves in reality."}]}]},{"content":[{"inlineContent":[{"text":"All effects must complete by the time the test case has finished running, and all effect","type":"text"},{"type":"text","text":" "},{"text":"actions must be asserted on.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If at the end of the assertion there is still an in-flight effect running or an unreceived"},{"type":"text","text":" "},{"text":"action, the assertion will fail. This helps exhaustively prove that you know what effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are in flight and forces you to prove that effects will not cause any future changes to"},{"text":" ","type":"text"},{"text":"your state.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Counter: ReducerProtocol {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"syntax":"swift","type":"codeListing","code":["@MainActor","class CounterTests: XCTestCase {","  func testCounter() async {","    let store = TestStore(","      \/\/ Given: a counter state of 0","      initialState: Counter.State(count: 0),","      reducer: Counter()","    )","","    \/\/ When: the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then: the count should be 1","      $0.count = 1","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the trailing closure of "},{"code":".send(.incrementButtonTapped)","type":"codeVoice"},{"type":"text","text":" we are given a single"},{"type":"text","text":" "},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value"},{"type":"text","text":" "},{"type":"text","text":"to match the state after the action was sent. In this case the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" field changes to "},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"If the change made in the closure does not reflect reality, you will get a test failure with","type":"text"},{"type":"text","text":" "},{"text":"a nicely formatted failure message letting you know exactly what went wrong:","type":"text"}],"type":"paragraph"},{"code":["await store.send(.incrementButtonTapped) {","  $0.count = 42","}"],"type":"codeListing","syntax":"swift"},{"type":"codeListing","code":["🛑 A state change does not match expectation: …","","     TestStoreFailureTests.State(","    −   count: 42","    +   count: 1","     )","","(Expected: −, Actual: +)"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a more complex example, consider the following bare-bones search feature that uses a"},{"type":"text","text":" "},{"type":"text","text":"clock and cancel token to debounce requests:"}]},{"syntax":"swift","type":"codeListing","code":["struct Search: ReducerProtocol {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action: Equatable {","    case queryChanged(String)","    case searchResponse(TaskResult<[String]>)","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.continuousClock) var clock","  private enum SearchID {}","","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case let .queryChanged(query):","      state.query = query","      return .run { send in","        try await self.clock.sleep(for: 0.5)","","        guard let results = try? await self.apiClient.search(query)","        else { return }","","        await send(.response(results))","      }","      .cancellable(id: SearchID.self)","","    case let .searchResponse(.success(results)):","      state.results = results","      return .none","","    case .searchResponse(.failure):","      \/\/ Do error handling here.","      return .none","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"It can be fully tested by overriding the "},{"type":"codeVoice","code":"apiClient"},{"text":" and ","type":"text"},{"code":"continuousClock","type":"codeVoice"},{"type":"text","text":" dependencies with"},{"text":" ","type":"text"},{"text":"values that are fully controlled and deterministic:","type":"text"}],"type":"paragraph"},{"code":["let store = TestStore(","  initialState: Search.State(),","  reducer: Search()",")","","\/\/ Simulate a search response with one item","store.dependencies.apiClient.search = { _ in","  [\"Composable Architecture\"]","}","","\/\/ Create a test clock to control the timing of effects","let clock = TestClock()","store.dependencies.continuousClock = clock","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the clock by enough to get past the debounce","await clock.advance(by: 0.5)","","\/\/ Assert that the expected response is received","await store.receive(.searchResponse(.success([\"Composable Architecture\"]))) {","  $0.results = [\"Composable Architecture\"]","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This test is proving that when the search query changes some search responses are delivered and","type":"text"},{"text":" ","type":"text"},{"text":"state updates accordingly.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If we did not assert that the ","type":"text"},{"type":"codeVoice","code":"searchResponse"},{"type":"text","text":" action was received, we would get the following"},{"type":"text","text":" "},{"type":"text","text":"test failure:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["🛑 The store received 1 unexpected action after this one: …","","    Unhandled actions: [","      [0]: Search.Action.searchResponse","    ]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This helpfully lets us know that we have no asserted on everything that happened in the feature,"},{"type":"text","text":" "},{"text":"which could be hiding a bug from us.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Or if we had sent another action before handling the effect’s action we would have also gotten","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a test failure:"}]},{"code":["🛑 Must handle 1 received action before sending an action: …","","    Unhandled actions: [","      [0]: Search.Action.searchResponse","    ]"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these types of failures help you prove that you know exactly how your feature evolves"},{"type":"text","text":" "},{"type":"text","text":"as actions are sent into the system. If the library did not produce a test failure in these"},{"type":"text","text":" "},{"text":"situations it could be hiding subtle bugs in your code. For example, when the user clears the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"search query you probably expect that the results are cleared and no search request is executed"},{"type":"text","text":" "},{"type":"text","text":"since there is no query. This can be done like so:"}]},{"code":["await store.send(.queryChanged(\"\")) {","  $0.query = \"\"","  $0.results = []","}","","\/\/ No need to perform `store.receive` since we do not expect a search","\/\/ effect to execute."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"But, if in the future a bug is introduced causing a search request to be executed even when the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"query is empty, you will get a test failure because a new effect is being created that is"},{"text":" ","type":"text"},{"type":"text","text":"not being asserted on. This is the power of exhaustive testing."}]},{"level":2,"type":"heading","text":"Non-exhaustive testing","anchor":"Non-exhaustive-testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While exhaustive testing can be powerful, it can also be a nuisance, especially when testing"},{"type":"text","text":" "},{"type":"text","text":"how many features integrate together. This is why sometimes you may want to selectively test"},{"type":"text","text":" "},{"text":"in a non-exhaustive style.","type":"text"}]},{"type":"aside","style":"tip","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"The concept of “non-exhaustive test store” was first introduced by","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.merowing.info"},{"text":" in a ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/vimeo.com\/751173570"},{"text":", and then later became integrated into the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"core library."}]}]},{"inlineContent":[{"text":"Test stores are exhaustive by default, which means you must assert on every state change, and","type":"text"},{"text":" ","type":"text"},{"text":"how ever effect feeds data back into the system, and you must make sure that all effects","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"complete before the test is finished. To turn off exhaustivity you can set "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","type":"reference","isActive":true},{"text":". When that is done the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":"’s behavior changes:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The trailing closures of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","isActive":true,"type":"reference"},{"type":"text","text":" no longer need to assert on all state changes."},{"text":" ","type":"text"},{"type":"text","text":"They can assert on any subset of changes, and only if they make an incorrect mutation will a"},{"type":"text","text":" "},{"text":"test failure be reported.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","isActive":true},{"type":"text","text":" "},{"text":"methods are allowed to be called even when actions have been received from effects that have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not been asserted on yet. Any pending actions will be cleared."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Tests are allowed to finish with unasserted, received actions and in-flight effects. No test","type":"text"},{"type":"text","text":" "},{"text":"failures will be reported.","type":"text"}]}]}]},{"inlineContent":[{"text":"Non-exhaustive stores can be configured to report skipped assertions by configuring","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"text":". When set to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" the test store will have the"},{"text":" ","type":"text"},{"text":"added behavior that any unasserted change causes a grey, informational box to appear next to","type":"text"},{"text":" ","type":"text"},{"text":"each assertion detailing the changes that were not asserted against. This allows you to see what","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"information you are choosing to ignore without causing a test failure. It can be useful in"},{"text":" ","type":"text"},{"type":"text","text":"tracking down bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This style of testing is most useful for testing the integration of multiple features where you"},{"type":"text","text":" "},{"text":"want to focus on just a certain slice of the behavior. Exhaustive testing can still be important","type":"text"},{"type":"text","text":" "},{"text":"to use for leaf node features, where you truly do want to assert on everything happening inside","type":"text"},{"text":" ","type":"text"},{"text":"the feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The"},{"type":"text","text":" "},{"text":"user can fill in some data on the screen, then tap the “Submit” button, and then a series of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"events happens to  log the user in. Once the user is logged in, the 3rd tab switches from a"},{"type":"text","text":" "},{"type":"text","text":"login screen to a profile screen, "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" the selected tab switches to the first tab, which is an"},{"type":"text","text":" "},{"text":"activity screen.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When writing tests for the login feature we will want to do that in the exhaustive style so that","type":"text"},{"type":"text","text":" "},{"text":"we can prove exactly how the feature would behave in production. But, suppose we wanted to write","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an integration test that proves after the user taps the “Login” button that ultimately the"},{"type":"text","text":" "},{"type":"text","text":"selected tab switches to the first tab."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to test such a complex flow we must test the integration of multiple features, which"},{"text":" ","type":"text"},{"text":"means dealing with complex, nested state and effects. We can emulate this flow in a test by","type":"text"},{"text":" ","type":"text"},{"text":"sending actions that mimic the user logging in, and then eventually assert that the selected","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tab switched to activity:"}]},{"code":["let store = TestStore(","  initialState: App.State(),","  reducer: App()",")","","\/\/ 1️⃣ Emulate user tapping on submit button.","await store.send(.login(.submitButtonTapped)) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  …","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(.login(.loginResponse(.success))) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  …","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(.login(.delegate(.didLogin))) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  …","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"We need to be intimately knowledgeable in how the login feature works so that we can assert","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on how its state changes and how its effects feed data back into the system."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the login feature were to change its logic we may get test failures here even though the","type":"text"},{"type":"text","text":" "},{"text":"logic we are actually trying to test doesn’t really care about those changes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This test is very long, and so if there are other similar but slightly different flows we","type":"text"},{"type":"text","text":" "},{"text":"want to test we will be tempted to copy-and-paste the whole thing, leading to lots of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"duplicated, fragile tests."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of"},{"text":" ","type":"text"},{"type":"text","text":"login causing the selected tab to switch to activity, without having to worry about what is"},{"type":"text","text":" "},{"type":"text","text":"happening inside the login feature. To do this, we can turn off "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"the test store, and then just assert on what we are interested in:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: App.State(),","  reducer: App()",")","store.exhaustivity = .off \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .activity","}"]},{"inlineContent":[{"text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed","type":"text"},{"type":"text","text":" "},{"text":"data back into the system. We just assert that when the “Submit” button is tapped that","type":"text"},{"text":" ","type":"text"},{"text":"eventually we get the ","type":"text"},{"code":"didLogin","type":"codeVoice"},{"type":"text","text":" delegate action and that causes the selected tab to flip to"},{"text":" ","type":"text"},{"text":"activity. Now the login feature is free to make any change it wants to make without affecting","type":"text"},{"text":" ","type":"text"},{"text":"this integration test.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","isActive":true,"type":"reference"},{"type":"text","text":" for "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"text":" causes all un-asserted changes to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pass without any notification. If you would like to see what test failures are being suppressed"},{"type":"text","text":" "},{"type":"text","text":"without actually causing a failure, you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let store = TestStore(","  initialState: App.State(),","  reducer: App()",")","store.exhaustivity = .off(showSkippedAssertions: true) \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .profile","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When this is run you will get grey, informational boxes on each assertion where some change"},{"type":"text","text":" "},{"text":"wasn’t fully asserted on:","type":"text"}]},{"syntax":null,"code":["◽️ A state change does not match expectation: …","","     App.State(","       authenticatedTab: .loggedOut(","         Login.State(","   −       isLoading: false","   +       isLoading: true,","           …","         )","       )","     )","","   (Expected: −, Actual: +)","","◽️ Skipped receiving .login(.loginResponse(.success))","","◽️ A state change does not match expectation: …","","     App.State(","   −   authenticatedTab: .loggedOut(…)","   +   authenticatedTab: .loggedIn(","   +     Profile.State(…)","   +   ),","       …","     )","","   (Expected: −, Actual: +)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The test still passes, and none of these notifications are test failures. They just let you know"},{"text":" ","type":"text"},{"text":"what things you are not explicitly asserting against, and can be useful to see when tracking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"down bugs that happen in production but that aren’t currently detected in tests."}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:action:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"A"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ScopedState"},{"kind":"text","text":") -> "},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") -> "},{"text":"ScopedAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":", ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Environment","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"scope(state:action:)","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:action:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","role":"symbol","abstract":[{"type":"text","text":"Scopes a store to assert against scoped state and actions."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:file:line:)-a4ri":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:file:line:)-a4ri","abstract":[{"text":"Clears the queue of received actions from effects.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"skipReceivedActions"},{"text":"(","kind":"text"},{"text":"strict","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"title":"skipReceivedActions(strict:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)-a4ri","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"State"}],"kind":"symbol","abstract":[{"type":"text","text":"The current state of the test store."}],"type":"topic","title":"state","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-1rwdd":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"text":"?, ","kind":"text"},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"ScopedState","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Action"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ScopedState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"receive(_:timeout:assert:file:line:)","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-1rwdd"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:)":{"abstract":[{"text":"Scopes a store to assert against scoped state.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": (","kind":"text"},{"text":"ScopedState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"S","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ScopedAction"},{"text":", ","kind":"text"},{"text":"Environment","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/scope(state:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)","title":"scope(state:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier","text":"UInt64"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/timeout","title":"timeout","role":"symbol","abstract":[{"type":"text","text":"The default timeout used in all methods that take an optional timeout."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-4e4m0":{"abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopedState","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-4e4m0","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-4e4m0","title":"receive(_:timeout:assert:file:line:)","kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ScopedState"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-3myco":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Action","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"code":"ScopedState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"ScopedState","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-3myco","title":"receive(_:timeout:assert:file:line:)","role":"symbol","abstract":[{"text":"Asserts a matching action was received from an effect and asserts how the state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-3myco","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:file:line:)-1ax61":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:file:line:)-1ax61","kind":"symbol","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ScopedAction"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"ScopedState","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","title":"send(_:assert:file:line:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:file:line:)":{"abstract":[{"text":"Suspends until all in-flight effects have finished, or until it times out.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"finish"},{"text":"(","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)","title":"finish(timeout:file:line:)","kind":"symbol","type":"topic","role":"symbol"},"https://www.merowing.info":{"url":"https:\/\/www.merowing.info","identifier":"https:\/\/www.merowing.info","type":"link","title":"Krzysztof Zabłocki","titleInlineContent":[{"text":"Krzysztof Zabłocki","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"abstract":[{"text":"The current dependencies of the test store.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependencies"},{"kind":"text","text":": "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"}],"url":"\/documentation\/composablearchitecture\/teststore\/dependencies","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","title":"dependencies","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:prepareDependencies:file:line:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"Reducer","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"initialState","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"reducer","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"prepareDependencies","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:preparedependencies:file:line:)","title":"init(initialState:reducer:prepareDependencies:file:line:)","role":"symbol","abstract":[{"type":"text","text":"Creates a test store with an initial state and a reducer powering it’s runtime."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:prepareDependencies:file:line:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","title":"off","url":"\/documentation\/composablearchitecture\/exhaustivity\/off","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"off"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"abstract":[{"text":"Review unsupported test store APIs and their replacements.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","role":"collectionGroup","kind":"article","title":"Deprecations","url":"\/documentation\/composablearchitecture\/teststoredeprecations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"title":"Exhaustivity.off(showSkippedAssertions:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"showSkippedAssertions"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"abstract":[{"text":"Non-exhaustive assertions.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"type":"topic","kind":"symbol","role":"symbol","title":"TestStoreTask","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStoreTask","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststoretask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","abstract":[{"text":"The type returned from ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-1ax61","isActive":true,"type":"reference"},{"text":" that represents the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lifecycle of the effect started from sending an action."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/composablearchitecture\/actorisolated","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","title":"ActorIsolated","role":"symbol"},"https://www.merowing.info/exhaustive-testing-in-tca/":{"url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","title":"blog post","type":"link","titleInlineContent":[{"type":"text","text":"blog post"}]},"https://vimeo.com/751173570":{"url":"https:\/\/vimeo.com\/751173570","identifier":"https:\/\/vimeo.com\/751173570","title":"conference talk","type":"link","titleInlineContent":[{"type":"text","text":"conference talk"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","type":"topic","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipInFlightEffects(strict:file:line:)-5hbsk":{"abstract":[{"type":"text","text":"Cancels any currently in-flight effects."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipInFlightEffects"},{"kind":"text","text":"("},{"kind":"externalParam","text":"strict"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/skipinflighteffects(strict:file:line:)-5hbsk","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)-5hbsk","title":"skipInFlightEffects(strict:file:line:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"type":"topic","kind":"symbol","role":"symbol","title":"TestStore","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}]}}}