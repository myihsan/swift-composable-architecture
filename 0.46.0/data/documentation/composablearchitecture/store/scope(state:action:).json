{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"metadata":{"symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"scope(state:action:)","role":"symbol","externalID":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"toChildState"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"text":" (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"fromChildAction"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms "},{"type":"codeVoice","code":"State"},{"type":"text","text":" into "},{"type":"codeVoice","code":"ChildState"},{"text":".","type":"text"}]}],"name":"toChildState"},{"name":"fromChildAction","content":[{"inlineContent":[{"text":"A function that transforms ","type":"text"},{"code":"ChildAction","type":"codeVoice"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A new store with its domain (state and action) transformed.","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be useful for deriving new stores to hand to child views in an application. For"},{"type":"text","text":" "},{"type":"text","text":"example:"}]},{"syntax":"swift","code":["\/\/ Application state made from child states.","struct State { var login: LoginState, ... }","enum Action { case login(LoginAction), ... }","","\/\/ A store that runs the entire application.","let store = Store(","  initialState: AppReducer.State(),","  reducer: AppReducer()",")","","\/\/ Construct a login view by scoping the store to one that works with only login domain.","LoginView(","  store: store.scope(","    state: \\.login,","    action: AppReducer.Action.login","  )",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Scoping in this fashion allows you to better modularize your application. In this case,","type":"text"},{"text":" ","type":"text"},{"code":"LoginView","type":"codeVoice"},{"type":"text","text":" could be extracted to a module that has no access to "},{"code":"App.State","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"App.Action","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scoping also gives a view the opportunity to focus on just the state and actions it cares"},{"type":"text","text":" "},{"type":"text","text":"about, even if its feature domain is larger."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above login domain could model a two screen login flow: a login form followed"},{"type":"text","text":" "},{"type":"text","text":"by a two-factor authentication screen. The second screen’s domain might be nested in the"},{"type":"text","text":" "},{"type":"text","text":"first:"}]},{"type":"codeListing","syntax":"swift","code":["struct LoginState: Equatable {","  var email = \"\"","  var password = \"\"","  var twoFactorAuth: TwoFactorAuthState?","}","","enum LoginAction: Equatable {","  case emailChanged(String)","  case loginButtonTapped","  case loginResponse(Result<TwoFactorAuthState, LoginError>)","  case passwordChanged(String)","  case twoFactorAuth(TwoFactorAuthAction)","}"]},{"inlineContent":[{"type":"text","text":"The login view holds onto a store of this domain:"}],"type":"paragraph"},{"code":["struct LoginView: View {","  let store: Store<LoginState, LoginAction>","","  var body: some View { ... }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If its body were to use a view store of the same domain, this would introduce a number of"},{"type":"text","text":" "},{"type":"text","text":"problems:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The login view would be able to read from "},{"code":"twoFactorAuth","type":"codeVoice"},{"type":"text","text":" state. This state is only intended"},{"type":"text","text":" "},{"type":"text","text":"to be read from the two-factor auth screen."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even worse, changes to "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" state would now cause SwiftUI to recompute"},{"text":" ","type":"text"},{"code":"LoginView","type":"codeVoice"},{"type":"text","text":"’s body unnecessarily."}]}]},{"content":[{"inlineContent":[{"text":"The login view would be able to send ","type":"text"},{"type":"codeVoice","code":"twoFactorAuth"},{"text":" actions. These actions are only","type":"text"},{"type":"text","text":" "},{"type":"text","text":"intended to be sent from the two-factor auth screen (and reducer)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The login view would be able to send non user-facing login actions, like ","type":"text"},{"type":"codeVoice","code":"loginResponse"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These actions are only intended to be used in the login reducer to feed the results of","type":"text"},{"type":"text","text":" "},{"text":"effects back into the store.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"To avoid these issues, one can introduce a view-specific domain that slices off the subset of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state and actions that a view cares about:"}]},{"type":"codeListing","code":["extension LoginView {","  struct State: Equatable {","    var email: String","    var password: String","  }","","  enum Action: Equatable {","    case emailChanged(String)","    case loginButtonTapped","    case passwordChanged(String)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also introduce a couple helpers that transform feature state into view state and"},{"type":"text","text":" "},{"type":"text","text":"transform view actions into feature actions."}]},{"syntax":"swift","type":"codeListing","code":["extension LoginState {","  var view: LoginView.State {","    .init(email: self.email, password: self.password)","  }","}","","extension LoginView.Action {","  var feature: LoginAction {","    switch self {","    case let .emailChanged(email)","      return .emailChanged(email)","    case .loginButtonTapped:","      return .loginButtonTapped","    case let .passwordChanged(password)","      return .passwordChanged(password)","    }","  }","}"]},{"inlineContent":[{"text":"With these helpers defined, ","type":"text"},{"code":"LoginView","type":"codeVoice"},{"type":"text","text":" can now scope its store’s feature domain into its view"},{"type":"text","text":" "},{"type":"text","text":"domain:"}],"type":"paragraph"},{"syntax":"swift","code":[" var body: some View {","   WithViewStore(","     self.store, observe: \\.view, send: \\.feature","   ) { viewStore in","     ...","   }"," }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This view store is now incapable of reading any state but view state (and will not recompute"},{"text":" ","type":"text"},{"text":"when non-view state changes), and is incapable of sending any actions but view actions.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/scope(state:action:)"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/stateless","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/actionless"],"anchor":"Overloads","title":"Overloads"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:)","type":"topic","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state."}],"role":"symbol","title":"scope(state:)","url":"\/documentation\/composablearchitecture\/store\/scope(state:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":") -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/stateless":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/stateless","type":"topic","abstract":[{"text":"Returns a “stateless” store by erasing state to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"stateless","url":"\/documentation\/composablearchitecture\/store\/stateless","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stateless","kind":"identifier"},{"kind":"text","text":": "},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/actionless":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/actionless","kind":"symbol","type":"topic","title":"actionless","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"actionless","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Never","kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/store\/actionless","abstract":[{"text":"Returns an “actionless” store by erasing action to ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)","kind":"symbol","title":"scope(state:action:)","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"}}}