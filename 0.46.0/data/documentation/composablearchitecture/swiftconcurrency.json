{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"kind":"article","variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"seeAlsoSections":[{"generated":true,"title":"Upgrade guides","anchor":"Upgrade-guides","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored","type":"text"},{"type":"text","text":" "},{"text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so","type":"text"},{"type":"text","text":" "},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"There are 3 primary ways to create an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","isActive":true},{"text":" in the library:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/task(priority:operation:catch:file:fileID:line:)"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:file:fileID:line:)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)","type":"reference","isActive":true}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Each of these constructors takes a ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":", asynchronous closure, which restricts the types of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closures you can use for your effects. In particular, the closure can only capture "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" "},{"text":"variables that are bound with ","type":"text"},{"type":"codeVoice","code":"let"},{"text":". Mutable variables and non-","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" types are simply not","type":"text"},{"type":"text","text":" "},{"text":"allowed to be passed to ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"text":" ","type":"text"},{"type":"text","text":"within an effect."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Accessing-state-in-an-effect","text":"Accessing state in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"text":" ","type":"text"},{"text":"from within ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"text":" closures:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Feature: ReducerProtocol {","  struct State { … }","  enum Action { … }","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .buttonTapped:","      return .task {","        try await Task.sleep(nanoseconds: NSEC_PER_SEC)","        return .delayed(state.count) ","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is ","        \/\/    not allowed in concurrently-executing code","      }","","      …","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"text":" ","type":"text"},{"text":"closure:","type":"text"}]},{"syntax":"swift","code":["return .task { [state] in ","  try await Task.sleep(nanoseconds: NSEC_PER_SEC)","  return .delayed(state.count) \/\/ ✅","}"],"type":"codeListing"},{"inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable name for the capture:"}],"type":"paragraph"},{"syntax":"swift","code":["return .task { [count = state.count] in ","  try await Task.sleep(nanoseconds: NSEC_PER_SEC)","  return .delayed(count) \/\/ ✅","}"],"type":"codeListing"},{"anchor":"Accessing-dependencies-in-an-effect","level":3,"type":"heading","text":"Accessing dependencies in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"type":"text","text":" "},{"text":"library. In particular, when extending ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"type":"text","text":" to provide the computed property:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"]},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"FactClient"},{"text":" is not ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" lines:"}],"type":"paragraph"},{"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":". This usually just means making sure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"text":" ","type":"text"},{"type":"text","text":"endpoints should be annotated as "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"text":"This will restrict the kinds of closures that can be used when constructing ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" values, thus","type":"text"},{"text":" ","type":"text"},{"text":"making the entire ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" sendable itself.","type":"text"}]}]}],"metadata":{"roleHeading":"Article","title":"Adopting Swift concurrency","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/task(priority:operation:catch:file:fileID:line:)":{"abstract":[{"text":"Wraps an asynchronous unit of work in an effect.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"role":"symbol","kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Failure"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/task(priority:operation:catch:file:fileID:line:)","title":"task(priority:operation:catch:file:fileID:line:)","url":"\/documentation\/composablearchitecture\/effectpublisher\/task(priority:operation:catch:file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/run(priority:operation:catch:file:fileID:line:)":{"kind":"symbol","role":"symbol","conformance":{"constraints":[{"code":"Failure","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Never","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Wraps an asynchronous unit of work that can emit any number of times in an effect.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","text":"EffectPublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"Failure","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effectpublisher\/run(priority:operation:catch:file:fileid:line:)","title":"run(priority:operation:catch:file:fileID:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:file:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","type":"reference","isActive":true},{"type":"text","text":", in both Swift 5.7 and"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","type":"topic","role":"article","title":"Migrating to the reducer protocol","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/fireAndForget(priority:_:)":{"abstract":[{"type":"text","text":"Creates an effect that executes some work in the real world that doesn’t need to feed data"},{"type":"text","text":" "},{"text":"back into the store. If an error is thrown, the effect will complete and the error will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ignored."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fireAndForget","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"role":"symbol","kind":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)","title":"fireAndForget(priority:_:)","url":"\/documentation\/composablearchitecture\/effectpublisher\/fireandforget(priority:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"type":"topic","title":"ReducerProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ReducerProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","navigatorTitle":[{"text":"ReducerProtocol","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"title":"EffectPublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effectpublisher","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectPublisher"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"navigatorTitle":[{"text":"EffectTask","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EffectTask","kind":"identifier"}],"title":"EffectTask","url":"\/documentation\/composablearchitecture\/effecttask","type":"topic"}}}