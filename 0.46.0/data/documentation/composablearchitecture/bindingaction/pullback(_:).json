{"sections":[],"abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"text":" ","type":"text"},{"text":"key path.","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"pullback","kind":"identifier"},{"kind":"text","text":"<"},{"text":"NewRoot","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"text":", ","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13BindingActionV","text":"BindingAction","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A key path from a new type of root state to the original root state.","type":"text"}]}],"name":"keyPath"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding action over a new type of root state."}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Useful in transforming binding actions on view state into binding actions on reducer state","type":"text"},{"text":" ","type":"text"},{"text":"when the domain contains ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"For example, we can model an feature that can bind an integer count to a stepper and make a","type":"text"},{"type":"text","text":" "},{"text":"network request to fetch a fact about that integer with the following domain:","type":"text"}],"type":"paragraph"},{"code":["struct MyFeature: ReducerProtocol {","  struct State: Equatable {","    @BindableState var count = 0","    var fact: String?","    ...","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    case factButtonTapped","    case factResponse(String?)","    ...","  }","","  @Dependency(\\.numberFact) var numberFact","","  var body: some ReducerProtocol<State, Action> {","    BindingReducer()","    \/\/ ...","  }","}","","struct MyFeatureView: View {","  let store: StoreOf<MyFeature>","","  var view: some View {","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The view may want to limit the state and actions it has access to by introducing a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"view-specific domain that contains only the state and actions the view needs. Not only will"},{"text":" ","type":"text"},{"text":"this minimize the number of times a view’s ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" is computed, it will prevent the view"},{"text":" ","type":"text"},{"type":"text","text":"from accessing state or sending actions outside its purview. We can define it with its own"},{"type":"text","text":" "},{"text":"bindable state and bindable action:","type":"text"}]},{"type":"codeListing","code":["extension MyFeatureView {","  struct ViewState: Equatable {","    @BindableState var count: Int","    let fact: String?","    \/\/ no access to any other state on `MyFeature.State`, like child domains","  }","","  enum ViewAction: BindableAction {","    case binding(BindingAction<ViewState>)","    case factButtonTapped","    \/\/ no access to any other action on `MyFeature.Action`, like `factResponse`","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to transform a "},{"code":"BindingAction<ViewState>","type":"codeVoice"},{"type":"text","text":" sent from the view domain into a"},{"type":"text","text":" "},{"type":"codeVoice","code":"BindingAction<MyFeature.State>"},{"type":"text","text":", we need a writable key path from "},{"code":"MyFeature.State","type":"codeVoice"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"text":". We can synthesize one by defining a computed property on ","type":"text"},{"type":"codeVoice","code":"MyFeature.State"},{"type":"text","text":" with a"},{"text":" ","type":"text"},{"type":"text","text":"getter and a setter. The setter should communicate any mutations to bindable state back to the"},{"text":" ","type":"text"},{"type":"text","text":"parent state:"}]},{"type":"codeListing","syntax":"swift","code":["extension MyFeature.State {","  var view: MyFeatureView.ViewState {","    get { .init(count: self.count, fact: self.fact) }","    set { self.count = newValue.count }","  }","}"]},{"inlineContent":[{"type":"text","text":"With this property defined it is now possible to transform a "},{"type":"codeVoice","code":"BindingAction<ViewState>"},{"text":" into","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"BindingAction<MyFeature.State>","type":"codeVoice"},{"type":"text","text":", which means we can transform a "},{"type":"codeVoice","code":"ViewAction"},{"text":" into an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"MyFeature.Action"},{"type":"text","text":". This is where "},{"code":"pullback","type":"codeVoice"},{"text":" comes into play: we can unwrap the view action’s","type":"text"},{"type":"text","text":" "},{"text":"binding action on view state and transform it with ","type":"text"},{"type":"codeVoice","code":"pullback"},{"text":" to work with feature state. We","type":"text"},{"text":" ","type":"text"},{"text":"can define a helper that performs this transformation, as well as route any other view actions","type":"text"},{"text":" ","type":"text"},{"text":"to their reducer equivalents:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension MyFeature.Action {","  static func view(_ viewAction: MyFeature.View.ViewAction) -> Self {","    switch viewAction {","    case let .binding(action):","      \/\/ transform view binding actions into feature binding actions","      return .binding(action.pullback(\\.view))","","    case let .factButtonTapped","      \/\/ route `ViewAction.factButtonTapped` to `MyFeature.Action.factButtonTapped`","      return .factButtonTapped","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"Finally, in the view we can invoke "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"reference","isActive":true},{"text":" with these domain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformations to leverage the view store’s binding helpers:"}],"type":"paragraph"},{"type":"codeListing","code":["WithViewStore(","  self.store, observe: \\.view, send: MyFeature.Action.view",") { viewStore in","  Stepper(\"\\(viewStore.count)\", viewStore.binding(\\.$count))","  Button(\"Get number fact\") { viewStore.send(.factButtonTapped) }","  if let fact = viewStore.fact {","    Text(fact)","  }","}"],"syntax":"swift"}]}],"metadata":{"extendedModule":"ComposableArchitecture","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pullback","kind":"identifier"},{"kind":"text","text":"<"},{"text":"NewRoot","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"NewRoot","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"text":">) -> ","kind":"text"},{"text":"BindingAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"text":"NewRoot","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture13BindingActionV8pullbackyACyqd__Gs15WritableKeyPathCyqd__xGlF","modules":[{"name":"ComposableArchitecture"}],"role":"symbol","title":"pullback(_:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)","kind":"symbol","title":"scope(state:action:)","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"kind":"symbol","type":"topic","title":"BindableState","abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"role":"symbol","title":"BindingAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindableAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","url":"\/documentation\/composablearchitecture\/bindableaction","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"role":"symbol","title":"BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"kind":"article","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","type":"topic","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftui","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction/pullback(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"text":" ","type":"text"},{"type":"text","text":"key path."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)","title":"pullback(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"text":"<","kind":"text"},{"text":"NewRoot","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"NewRoot","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Root","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13BindingActionV","text":"BindingAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewRoot","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}